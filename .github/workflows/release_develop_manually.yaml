name: Release develop Charts manually
on:
  workflow_dispatch:

jobs:
  check:
    name: Release develop charts manually
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.10.0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v2.0.0'

      - name: Push develop charts
        env:
          changed_charts: ${{ env.changed_charts }}
          HELM_OCI_REGISTRY: ${{ secrets.HELM_OCI_REGISTRY }}
          HELM_OCI_REPOSITORY: ${{ secrets.HELM_OCI_REPOSITORY }}
          HELM_USERNAME: ${{ secrets.HARBOR_3KEY_USERNAME }}
          HELM_PASSWORD: ${{ secrets.HARBOR_3KEY_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
        run: |
          echo "Logging in to $HELM_OCI_REGISTRY"
          helm registry login $HELM_OCI_REGISTRY --username $HELM_USERNAME --password $HELM_PASSWORD
          
          cosign login $HELM_OCI_REGISTRY --username $HELM_USERNAME --password $HELM_PASSWORD
          
          release_chart(){
            CHART=$1
          
            name=$(yq ".name" < ${CHART}/Chart.yaml)
            version=$(yq ".version" < ${CHART}/Chart.yaml)
          
            echo "Releasing chart $CHART with version $version"
          
            helm dependency update $CHART
            helm package $CHART
            pushed=$(helm push $name-$version.tgz oci://$HELM_OCI_REGISTRY/$HELM_OCI_REPOSITORY)
          
            digest=$(echo "$pushed" | awk 'FNR == 2 {print $2}')
          
            cosign sign --yes --key env://COSIGN_PRIVATE_KEY $HELM_OCI_REGISTRY/$HELM_OCI_REPOSITORY/$name@$digest
          
            echo "Chart $name-$version pushed"
          
            # SPECIFIC TO HARBOR
            echo "Check if develop tag 0.0.0 exists and remove it"
            pulled=$(helm pull oci://$HELM_OCI_REGISTRY/$HELM_OCI_REPOSITORY/$name --version 0.0.0 2>&1)
            if [[ $pulled == *"Digest:"* ]]; then
              removeFrom=$(echo "$pulled" | awk 'FNR == 2 {print $2}')
              echo "Tag 0.0.0 exists, remove it from $removeFrom"
              curl --user $HELM_USERNAME:$HELM_PASSWORD --request DELETE --silent --show-error \
                https://$HELM_OCI_REGISTRY/api/v2.0/projects/$HELM_OCI_REPOSITORY/repositories/$name/artifacts/$removeFrom/tags/0.0.0
            fi
          
            echo "Create new develop tag 0.0.0"
            curl --user $HELM_USERNAME:$HELM_PASSWORD --request POST --header "Content-Type: application/json" \
              --silent --show-error --data '{"name":"0.0.0"}' \
              https://$HELM_OCI_REGISTRY/api/v2.0/projects/$HELM_OCI_REPOSITORY/repositories/$name/artifacts/$digest/tags
          }
          
          for CHART in $changed_charts
          do
            echo "Releasing $CHART"
            release_chart $CHART
          done
                    
          echo "Logging out from $HELM_OCI_REGISTRY"
          helm registry logout $HELM_OCI_REGISTRY
