name: Release master Charts
on:
  push:
    tags:
      - '*'  # we want to trigger this workflow on any tag
  workflow_dispatch:

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.10.0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          # get the previous tag
          last_tag=$(git for-each-ref --sort=-creatordate --count 2 --format="%(refname:short)" "refs/tags/*" | sed -n '2 p')
          echo "Last tag: $last_tag"
          echo "last_tag=$last_tag" >> $GITHUB_ENV
          
          changed=$(ct list-changed --target-branch master --since $last_tag --chart-dirs deploy/charts)
          echo "${changed}"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> $GITHUB_ENV
          
            # multiline string
            echo "changed_charts<<EOF" >> $GITHUB_ENV
            echo "$changed" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Check that chart version does not contain develop
        if: env.changed == 'true'
        env:
          changed_charts: ${{ env.changed_charts }}
        run: |
          #echo "${changed}"
          #echo "${changed_charts}"
          for CHART in $changed_charts
          do
            echo "Checking chart $CHART for develop version"
            version=$(yq ".version" < ${CHART}/Chart.yaml)
            if [[ $version == *-develop ]]; then
              echo "Chart $CHART contains develop, but not intended for develop" 
              exit 1
            fi
          done

      - name: Run chart-testing (lint)
        env:
          last_tag: ${{ env.last_tag }}
        run: ct lint --target-branch master --since $last_tag --chart-dirs deploy/charts --check-version-increment=false

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v2.0.0'

      - name: Push release charts
        if: env.changed == 'true'
        env:
          changed_charts: ${{ env.changed_charts }}
          HELM_OCI_REGISTRY: ${{ secrets.HELM_OCI_REGISTRY }}
          HELM_OCI_REPOSITORY: ${{ secrets.HELM_OCI_REPOSITORY }}
          HELM_USERNAME: ${{ secrets.HARBOR_3KEY_USERNAME }}
          HELM_PASSWORD: ${{ secrets.HARBOR_3KEY_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
        run: |
          echo "Logging in to $HELM_OCI_REGISTRY"
          helm registry login $HELM_OCI_REGISTRY --username $HELM_USERNAME --password $HELM_PASSWORD
          
          cosign login $HELM_OCI_REGISTRY --username $HELM_USERNAME --password $HELM_PASSWORD
          
          release_chart(){
            CHART=$1
          
            name=$(yq ".name" < ${CHART}/Chart.yaml)
            version=$(yq ".version" < ${CHART}/Chart.yaml)
          
            echo "Releasing chart $CHART with version $version"
          
            helm dependency update $CHART
            helm package $CHART
            pushed=$(helm push $name-$version.tgz oci://$HELM_OCI_REGISTRY/$HELM_OCI_REPOSITORY)
          
            digest=$(echo "$pushed" | awk 'FNR == 2 {print $2}')
          
            cosign sign --yes --key env://COSIGN_PRIVATE_KEY $HELM_OCI_REGISTRY/$HELM_OCI_REPOSITORY/$name@$digest
          
            echo "Chart $name-$version pushed"
          }
          
          for CHART in $changed_charts
          do
            echo "Releasing $CHART"
            release_chart $CHART
          done
          
          echo "Logging out from $HELM_OCI_REGISTRY"
          helm registry logout $HELM_OCI_REGISTRY
