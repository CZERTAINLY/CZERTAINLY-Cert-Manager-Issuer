/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.1
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// KeyState Key State
type KeyState string

// List of KeyState
const (
	KEYSTATE_PRE_ACTIVE KeyState = "pre-active"
	KEYSTATE_ACTIVE KeyState = "active"
	KEYSTATE_DEACTIVATED KeyState = "deactivated"
	KEYSTATE_COMPROMISED KeyState = "compromised"
	KEYSTATE_DESTROYED KeyState = "destroyed"
	KEYSTATE_DESTROYED_COMPROMISED KeyState = "destroyedCompromised"
)

// All allowed values of KeyState enum
var AllowedKeyStateEnumValues = []KeyState{
	"pre-active",
	"active",
	"deactivated",
	"compromised",
	"destroyed",
	"destroyedCompromised",
}

func (v *KeyState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyState(value)
	for _, existing := range AllowedKeyStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyState", value)
}

// NewKeyStateFromValue returns a pointer to a valid KeyState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyStateFromValue(v string) (*KeyState, error) {
	ev := KeyState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyState: valid values are %v", v, AllowedKeyStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyState) IsValid() bool {
	for _, existing := range AllowedKeyStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyState value
func (v KeyState) Ptr() *KeyState {
	return &v
}

type NullableKeyState struct {
	value *KeyState
	isSet bool
}

func (v NullableKeyState) Get() *KeyState {
	return v.value
}

func (v *NullableKeyState) Set(val *KeyState) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyState) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyState(val *KeyState) *NullableKeyState {
	return &NullableKeyState{value: val, isSet: true}
}

func (v NullableKeyState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

