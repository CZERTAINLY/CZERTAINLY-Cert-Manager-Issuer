/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.1
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the CertificateComplianceResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateComplianceResultDto{}

// CertificateComplianceResultDto Certificate compliance check result
type CertificateComplianceResultDto struct {
	// Name of the Compliance Provider
	ConnectorName string `json:"connectorName"`
	// Name of the rule
	RuleName string `json:"ruleName"`
	// Description of the rule
	RuleDescription string `json:"ruleDescription"`
	Status ComplianceRuleStatus `json:"status"`
	// Attributes of the rule
	Attributes []ResponseAttributeDto `json:"attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateComplianceResultDto CertificateComplianceResultDto

// NewCertificateComplianceResultDto instantiates a new CertificateComplianceResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateComplianceResultDto(connectorName string, ruleName string, ruleDescription string, status ComplianceRuleStatus) *CertificateComplianceResultDto {
	this := CertificateComplianceResultDto{}
	this.ConnectorName = connectorName
	this.RuleName = ruleName
	this.RuleDescription = ruleDescription
	this.Status = status
	return &this
}

// NewCertificateComplianceResultDtoWithDefaults instantiates a new CertificateComplianceResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateComplianceResultDtoWithDefaults() *CertificateComplianceResultDto {
	this := CertificateComplianceResultDto{}
	return &this
}

// GetConnectorName returns the ConnectorName field value
func (o *CertificateComplianceResultDto) GetConnectorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectorName
}

// GetConnectorNameOk returns a tuple with the ConnectorName field value
// and a boolean to check if the value has been set.
func (o *CertificateComplianceResultDto) GetConnectorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectorName, true
}

// SetConnectorName sets field value
func (o *CertificateComplianceResultDto) SetConnectorName(v string) {
	o.ConnectorName = v
}

// GetRuleName returns the RuleName field value
func (o *CertificateComplianceResultDto) GetRuleName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value
// and a boolean to check if the value has been set.
func (o *CertificateComplianceResultDto) GetRuleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleName, true
}

// SetRuleName sets field value
func (o *CertificateComplianceResultDto) SetRuleName(v string) {
	o.RuleName = v
}

// GetRuleDescription returns the RuleDescription field value
func (o *CertificateComplianceResultDto) GetRuleDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleDescription
}

// GetRuleDescriptionOk returns a tuple with the RuleDescription field value
// and a boolean to check if the value has been set.
func (o *CertificateComplianceResultDto) GetRuleDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleDescription, true
}

// SetRuleDescription sets field value
func (o *CertificateComplianceResultDto) SetRuleDescription(v string) {
	o.RuleDescription = v
}

// GetStatus returns the Status field value
func (o *CertificateComplianceResultDto) GetStatus() ComplianceRuleStatus {
	if o == nil {
		var ret ComplianceRuleStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CertificateComplianceResultDto) GetStatusOk() (*ComplianceRuleStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CertificateComplianceResultDto) SetStatus(v ComplianceRuleStatus) {
	o.Status = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *CertificateComplianceResultDto) GetAttributes() []ResponseAttributeDto {
	if o == nil || IsNil(o.Attributes) {
		var ret []ResponseAttributeDto
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateComplianceResultDto) GetAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *CertificateComplianceResultDto) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ResponseAttributeDto and assigns it to the Attributes field.
func (o *CertificateComplianceResultDto) SetAttributes(v []ResponseAttributeDto) {
	o.Attributes = v
}

func (o CertificateComplianceResultDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateComplianceResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectorName"] = o.ConnectorName
	toSerialize["ruleName"] = o.RuleName
	toSerialize["ruleDescription"] = o.RuleDescription
	toSerialize["status"] = o.Status
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateComplianceResultDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectorName",
		"ruleName",
		"ruleDescription",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateComplianceResultDto := _CertificateComplianceResultDto{}

	err = json.Unmarshal(data, &varCertificateComplianceResultDto)

	if err != nil {
		return err
	}

	*o = CertificateComplianceResultDto(varCertificateComplianceResultDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "connectorName")
		delete(additionalProperties, "ruleName")
		delete(additionalProperties, "ruleDescription")
		delete(additionalProperties, "status")
		delete(additionalProperties, "attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateComplianceResultDto struct {
	value *CertificateComplianceResultDto
	isSet bool
}

func (v NullableCertificateComplianceResultDto) Get() *CertificateComplianceResultDto {
	return v.value
}

func (v *NullableCertificateComplianceResultDto) Set(val *CertificateComplianceResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateComplianceResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateComplianceResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateComplianceResultDto(val *CertificateComplianceResultDto) *NullableCertificateComplianceResultDto {
	return &NullableCertificateComplianceResultDto{value: val, isSet: true}
}

func (v NullableCertificateComplianceResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateComplianceResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


