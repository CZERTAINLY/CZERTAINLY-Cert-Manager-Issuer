/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the CertificateInLocationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateInLocationDto{}

// CertificateInLocationDto struct for CertificateInLocationDto
type CertificateInLocationDto struct {
	// UUID of the Certificate
	CertificateUuid string `json:"certificateUuid"`
	// State of the Certificate
	State CertificateState `json:"state"`
	// Current validation status of the certificate
	ValidationStatus CertificateValidationStatus `json:"validationStatus"`
	// Common Name of the Subject DN field of the Certificate
	CommonName string `json:"commonName"`
	// Serial number in HEX of the Certificate
	SerialNumber string `json:"serialNumber"`
	// Metadata of the Certificate in Location
	Metadata []MetadataResponseDto `json:"metadata,omitempty"`
	// Applied push attributes
	PushAttributes []ResponseAttributeDto `json:"pushAttributes,omitempty"`
	// Applied issue attributes
	CsrAttributes []ResponseAttributeDto `json:"csrAttributes,omitempty"`
	// If the Certificate in Location has associated private key
	WithKey *bool `json:"withKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateInLocationDto CertificateInLocationDto

// NewCertificateInLocationDto instantiates a new CertificateInLocationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateInLocationDto(certificateUuid string, state CertificateState, validationStatus CertificateValidationStatus, commonName string, serialNumber string) *CertificateInLocationDto {
	this := CertificateInLocationDto{}
	this.CertificateUuid = certificateUuid
	this.State = state
	this.ValidationStatus = validationStatus
	this.CommonName = commonName
	this.SerialNumber = serialNumber
	var withKey bool = false
	this.WithKey = &withKey
	return &this
}

// NewCertificateInLocationDtoWithDefaults instantiates a new CertificateInLocationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateInLocationDtoWithDefaults() *CertificateInLocationDto {
	this := CertificateInLocationDto{}
	var withKey bool = false
	this.WithKey = &withKey
	return &this
}

// GetCertificateUuid returns the CertificateUuid field value
func (o *CertificateInLocationDto) GetCertificateUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateUuid
}

// GetCertificateUuidOk returns a tuple with the CertificateUuid field value
// and a boolean to check if the value has been set.
func (o *CertificateInLocationDto) GetCertificateUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateUuid, true
}

// SetCertificateUuid sets field value
func (o *CertificateInLocationDto) SetCertificateUuid(v string) {
	o.CertificateUuid = v
}

// GetState returns the State field value
func (o *CertificateInLocationDto) GetState() CertificateState {
	if o == nil {
		var ret CertificateState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CertificateInLocationDto) GetStateOk() (*CertificateState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CertificateInLocationDto) SetState(v CertificateState) {
	o.State = v
}

// GetValidationStatus returns the ValidationStatus field value
func (o *CertificateInLocationDto) GetValidationStatus() CertificateValidationStatus {
	if o == nil {
		var ret CertificateValidationStatus
		return ret
	}

	return o.ValidationStatus
}

// GetValidationStatusOk returns a tuple with the ValidationStatus field value
// and a boolean to check if the value has been set.
func (o *CertificateInLocationDto) GetValidationStatusOk() (*CertificateValidationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidationStatus, true
}

// SetValidationStatus sets field value
func (o *CertificateInLocationDto) SetValidationStatus(v CertificateValidationStatus) {
	o.ValidationStatus = v
}

// GetCommonName returns the CommonName field value
func (o *CertificateInLocationDto) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *CertificateInLocationDto) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *CertificateInLocationDto) SetCommonName(v string) {
	o.CommonName = v
}

// GetSerialNumber returns the SerialNumber field value
func (o *CertificateInLocationDto) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *CertificateInLocationDto) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *CertificateInLocationDto) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CertificateInLocationDto) GetMetadata() []MetadataResponseDto {
	if o == nil || IsNil(o.Metadata) {
		var ret []MetadataResponseDto
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInLocationDto) GetMetadataOk() ([]MetadataResponseDto, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CertificateInLocationDto) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []MetadataResponseDto and assigns it to the Metadata field.
func (o *CertificateInLocationDto) SetMetadata(v []MetadataResponseDto) {
	o.Metadata = v
}

// GetPushAttributes returns the PushAttributes field value if set, zero value otherwise.
func (o *CertificateInLocationDto) GetPushAttributes() []ResponseAttributeDto {
	if o == nil || IsNil(o.PushAttributes) {
		var ret []ResponseAttributeDto
		return ret
	}
	return o.PushAttributes
}

// GetPushAttributesOk returns a tuple with the PushAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInLocationDto) GetPushAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil || IsNil(o.PushAttributes) {
		return nil, false
	}
	return o.PushAttributes, true
}

// HasPushAttributes returns a boolean if a field has been set.
func (o *CertificateInLocationDto) HasPushAttributes() bool {
	if o != nil && !IsNil(o.PushAttributes) {
		return true
	}

	return false
}

// SetPushAttributes gets a reference to the given []ResponseAttributeDto and assigns it to the PushAttributes field.
func (o *CertificateInLocationDto) SetPushAttributes(v []ResponseAttributeDto) {
	o.PushAttributes = v
}

// GetCsrAttributes returns the CsrAttributes field value if set, zero value otherwise.
func (o *CertificateInLocationDto) GetCsrAttributes() []ResponseAttributeDto {
	if o == nil || IsNil(o.CsrAttributes) {
		var ret []ResponseAttributeDto
		return ret
	}
	return o.CsrAttributes
}

// GetCsrAttributesOk returns a tuple with the CsrAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInLocationDto) GetCsrAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil || IsNil(o.CsrAttributes) {
		return nil, false
	}
	return o.CsrAttributes, true
}

// HasCsrAttributes returns a boolean if a field has been set.
func (o *CertificateInLocationDto) HasCsrAttributes() bool {
	if o != nil && !IsNil(o.CsrAttributes) {
		return true
	}

	return false
}

// SetCsrAttributes gets a reference to the given []ResponseAttributeDto and assigns it to the CsrAttributes field.
func (o *CertificateInLocationDto) SetCsrAttributes(v []ResponseAttributeDto) {
	o.CsrAttributes = v
}

// GetWithKey returns the WithKey field value if set, zero value otherwise.
func (o *CertificateInLocationDto) GetWithKey() bool {
	if o == nil || IsNil(o.WithKey) {
		var ret bool
		return ret
	}
	return *o.WithKey
}

// GetWithKeyOk returns a tuple with the WithKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInLocationDto) GetWithKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.WithKey) {
		return nil, false
	}
	return o.WithKey, true
}

// HasWithKey returns a boolean if a field has been set.
func (o *CertificateInLocationDto) HasWithKey() bool {
	if o != nil && !IsNil(o.WithKey) {
		return true
	}

	return false
}

// SetWithKey gets a reference to the given bool and assigns it to the WithKey field.
func (o *CertificateInLocationDto) SetWithKey(v bool) {
	o.WithKey = &v
}

func (o CertificateInLocationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateInLocationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificateUuid"] = o.CertificateUuid
	toSerialize["state"] = o.State
	toSerialize["validationStatus"] = o.ValidationStatus
	toSerialize["commonName"] = o.CommonName
	toSerialize["serialNumber"] = o.SerialNumber
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.PushAttributes) {
		toSerialize["pushAttributes"] = o.PushAttributes
	}
	if !IsNil(o.CsrAttributes) {
		toSerialize["csrAttributes"] = o.CsrAttributes
	}
	if !IsNil(o.WithKey) {
		toSerialize["withKey"] = o.WithKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateInLocationDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificateUuid",
		"state",
		"validationStatus",
		"commonName",
		"serialNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateInLocationDto := _CertificateInLocationDto{}

	err = json.Unmarshal(data, &varCertificateInLocationDto)

	if err != nil {
		return err
	}

	*o = CertificateInLocationDto(varCertificateInLocationDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificateUuid")
		delete(additionalProperties, "state")
		delete(additionalProperties, "validationStatus")
		delete(additionalProperties, "commonName")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "pushAttributes")
		delete(additionalProperties, "csrAttributes")
		delete(additionalProperties, "withKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateInLocationDto struct {
	value *CertificateInLocationDto
	isSet bool
}

func (v NullableCertificateInLocationDto) Get() *CertificateInLocationDto {
	return v.value
}

func (v *NullableCertificateInLocationDto) Set(val *CertificateInLocationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateInLocationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateInLocationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateInLocationDto(val *CertificateInLocationDto) *NullableCertificateInLocationDto {
	return &NullableCertificateInLocationDto{value: val, isSet: true}
}

func (v NullableCertificateInLocationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateInLocationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


