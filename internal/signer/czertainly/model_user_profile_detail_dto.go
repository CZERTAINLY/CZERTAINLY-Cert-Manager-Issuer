/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the UserProfileDetailDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserProfileDetailDto{}

// UserProfileDetailDto struct for UserProfileDetailDto
type UserProfileDetailDto struct {
	// UUID of the User
	Uuid string `json:"uuid"`
	// Username of the user
	Username string `json:"username"`
	// First name of the user
	FirstName *string `json:"firstName,omitempty"`
	// Last name of the user
	LastName *string `json:"lastName,omitempty"`
	// Email of the user
	Email *string `json:"email,omitempty"`
	// Description of the user
	Description *string `json:"description,omitempty"`
	// Groups of the user
	Groups []NameAndUuidDto `json:"groups"`
	// Status of the user. True = Enabled, False = Disabled
	Enabled bool `json:"enabled"`
	// Is System user. True = Yes, False = No
	SystemUser bool `json:"systemUser"`
	// User Certificate details
	Certificate *UserCertificateDto `json:"certificate,omitempty"`
	// Roles for the user
	Roles []RoleDto `json:"roles"`
	// List of Custom Attributes
	CustomAttributes []ResponseAttributeDto `json:"customAttributes,omitempty"`
	// User permissions
	Permissions UserProfilePermissionsDto `json:"permissions"`
	AdditionalProperties map[string]interface{}
}

type _UserProfileDetailDto UserProfileDetailDto

// NewUserProfileDetailDto instantiates a new UserProfileDetailDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserProfileDetailDto(uuid string, username string, groups []NameAndUuidDto, enabled bool, systemUser bool, roles []RoleDto, permissions UserProfilePermissionsDto) *UserProfileDetailDto {
	this := UserProfileDetailDto{}
	this.Uuid = uuid
	this.Username = username
	this.Groups = groups
	this.Enabled = enabled
	this.SystemUser = systemUser
	this.Roles = roles
	this.Permissions = permissions
	return &this
}

// NewUserProfileDetailDtoWithDefaults instantiates a new UserProfileDetailDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserProfileDetailDtoWithDefaults() *UserProfileDetailDto {
	this := UserProfileDetailDto{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *UserProfileDetailDto) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *UserProfileDetailDto) SetUuid(v string) {
	o.Uuid = v
}

// GetUsername returns the Username field value
func (o *UserProfileDetailDto) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserProfileDetailDto) SetUsername(v string) {
	o.Username = v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserProfileDetailDto) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserProfileDetailDto) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserProfileDetailDto) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UserProfileDetailDto) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UserProfileDetailDto) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UserProfileDetailDto) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserProfileDetailDto) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserProfileDetailDto) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserProfileDetailDto) SetEmail(v string) {
	o.Email = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UserProfileDetailDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UserProfileDetailDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UserProfileDetailDto) SetDescription(v string) {
	o.Description = &v
}

// GetGroups returns the Groups field value
func (o *UserProfileDetailDto) GetGroups() []NameAndUuidDto {
	if o == nil {
		var ret []NameAndUuidDto
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetGroupsOk() ([]NameAndUuidDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *UserProfileDetailDto) SetGroups(v []NameAndUuidDto) {
	o.Groups = v
}

// GetEnabled returns the Enabled field value
func (o *UserProfileDetailDto) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *UserProfileDetailDto) SetEnabled(v bool) {
	o.Enabled = v
}

// GetSystemUser returns the SystemUser field value
func (o *UserProfileDetailDto) GetSystemUser() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SystemUser
}

// GetSystemUserOk returns a tuple with the SystemUser field value
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetSystemUserOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemUser, true
}

// SetSystemUser sets field value
func (o *UserProfileDetailDto) SetSystemUser(v bool) {
	o.SystemUser = v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *UserProfileDetailDto) GetCertificate() UserCertificateDto {
	if o == nil || IsNil(o.Certificate) {
		var ret UserCertificateDto
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetCertificateOk() (*UserCertificateDto, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *UserProfileDetailDto) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given UserCertificateDto and assigns it to the Certificate field.
func (o *UserProfileDetailDto) SetCertificate(v UserCertificateDto) {
	o.Certificate = &v
}

// GetRoles returns the Roles field value
func (o *UserProfileDetailDto) GetRoles() []RoleDto {
	if o == nil {
		var ret []RoleDto
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetRolesOk() ([]RoleDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *UserProfileDetailDto) SetRoles(v []RoleDto) {
	o.Roles = v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise.
func (o *UserProfileDetailDto) GetCustomAttributes() []ResponseAttributeDto {
	if o == nil || IsNil(o.CustomAttributes) {
		var ret []ResponseAttributeDto
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetCustomAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *UserProfileDetailDto) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []ResponseAttributeDto and assigns it to the CustomAttributes field.
func (o *UserProfileDetailDto) SetCustomAttributes(v []ResponseAttributeDto) {
	o.CustomAttributes = v
}

// GetPermissions returns the Permissions field value
func (o *UserProfileDetailDto) GetPermissions() UserProfilePermissionsDto {
	if o == nil {
		var ret UserProfilePermissionsDto
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *UserProfileDetailDto) GetPermissionsOk() (*UserProfilePermissionsDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *UserProfileDetailDto) SetPermissions(v UserProfilePermissionsDto) {
	o.Permissions = v
}

func (o UserProfileDetailDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserProfileDetailDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["username"] = o.Username
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["groups"] = o.Groups
	toSerialize["enabled"] = o.Enabled
	toSerialize["systemUser"] = o.SystemUser
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	toSerialize["roles"] = o.Roles
	if !IsNil(o.CustomAttributes) {
		toSerialize["customAttributes"] = o.CustomAttributes
	}
	toSerialize["permissions"] = o.Permissions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserProfileDetailDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"username",
		"groups",
		"enabled",
		"systemUser",
		"roles",
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserProfileDetailDto := _UserProfileDetailDto{}

	err = json.Unmarshal(data, &varUserProfileDetailDto)

	if err != nil {
		return err
	}

	*o = UserProfileDetailDto(varUserProfileDetailDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "username")
		delete(additionalProperties, "firstName")
		delete(additionalProperties, "lastName")
		delete(additionalProperties, "email")
		delete(additionalProperties, "description")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "systemUser")
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "roles")
		delete(additionalProperties, "customAttributes")
		delete(additionalProperties, "permissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserProfileDetailDto struct {
	value *UserProfileDetailDto
	isSet bool
}

func (v NullableUserProfileDetailDto) Get() *UserProfileDetailDto {
	return v.value
}

func (v *NullableUserProfileDetailDto) Set(val *UserProfileDetailDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserProfileDetailDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserProfileDetailDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserProfileDetailDto(val *UserProfileDetailDto) *NullableUserProfileDetailDto {
	return &NullableUserProfileDetailDto{value: val, isSet: true}
}

func (v NullableUserProfileDetailDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserProfileDetailDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


