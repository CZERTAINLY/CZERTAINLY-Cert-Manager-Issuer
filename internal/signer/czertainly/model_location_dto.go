/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.1
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the LocationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationDto{}

// LocationDto Locations associated to the Certificate
type LocationDto struct {
	// Object identifier
	Uuid string `json:"uuid"`
	// Object Name
	Name string `json:"name"`
	// Description of the Location
	Description *string `json:"description,omitempty"`
	// UUID of Entity instance
	EntityInstanceUuid string `json:"entityInstanceUuid"`
	// Name of Entity instance
	EntityInstanceName string `json:"entityInstanceName"`
	// List of Location attributes
	Attributes []ResponseAttributeDto `json:"attributes"`
	// List of Custom Attributes
	CustomAttributes []ResponseAttributeDto `json:"customAttributes,omitempty"`
	// Enabled flag - true = enabled; false = disabled
	Enabled bool `json:"enabled"`
	// If the location supports multiple Certificates
	SupportMultipleEntries bool `json:"supportMultipleEntries"`
	// If the location supports key management operations
	SupportKeyManagement bool `json:"supportKeyManagement"`
	// List of Certificates in Location
	Certificates []CertificateInLocationDto `json:"certificates"`
	// Location metadata
	Metadata []MetadataResponseDto `json:"metadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LocationDto LocationDto

// NewLocationDto instantiates a new LocationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationDto(uuid string, name string, entityInstanceUuid string, entityInstanceName string, attributes []ResponseAttributeDto, enabled bool, supportMultipleEntries bool, supportKeyManagement bool, certificates []CertificateInLocationDto) *LocationDto {
	this := LocationDto{}
	this.Uuid = uuid
	this.Name = name
	this.EntityInstanceUuid = entityInstanceUuid
	this.EntityInstanceName = entityInstanceName
	this.Attributes = attributes
	this.Enabled = enabled
	this.SupportMultipleEntries = supportMultipleEntries
	this.SupportKeyManagement = supportKeyManagement
	this.Certificates = certificates
	return &this
}

// NewLocationDtoWithDefaults instantiates a new LocationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationDtoWithDefaults() *LocationDto {
	this := LocationDto{}
	var supportMultipleEntries bool = false
	this.SupportMultipleEntries = supportMultipleEntries
	var supportKeyManagement bool = false
	this.SupportKeyManagement = supportKeyManagement
	return &this
}

// GetUuid returns the Uuid field value
func (o *LocationDto) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *LocationDto) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *LocationDto) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *LocationDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LocationDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LocationDto) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LocationDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LocationDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LocationDto) SetDescription(v string) {
	o.Description = &v
}

// GetEntityInstanceUuid returns the EntityInstanceUuid field value
func (o *LocationDto) GetEntityInstanceUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityInstanceUuid
}

// GetEntityInstanceUuidOk returns a tuple with the EntityInstanceUuid field value
// and a boolean to check if the value has been set.
func (o *LocationDto) GetEntityInstanceUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityInstanceUuid, true
}

// SetEntityInstanceUuid sets field value
func (o *LocationDto) SetEntityInstanceUuid(v string) {
	o.EntityInstanceUuid = v
}

// GetEntityInstanceName returns the EntityInstanceName field value
func (o *LocationDto) GetEntityInstanceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityInstanceName
}

// GetEntityInstanceNameOk returns a tuple with the EntityInstanceName field value
// and a boolean to check if the value has been set.
func (o *LocationDto) GetEntityInstanceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityInstanceName, true
}

// SetEntityInstanceName sets field value
func (o *LocationDto) SetEntityInstanceName(v string) {
	o.EntityInstanceName = v
}

// GetAttributes returns the Attributes field value
func (o *LocationDto) GetAttributes() []ResponseAttributeDto {
	if o == nil {
		var ret []ResponseAttributeDto
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *LocationDto) GetAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attributes, true
}

// SetAttributes sets field value
func (o *LocationDto) SetAttributes(v []ResponseAttributeDto) {
	o.Attributes = v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise.
func (o *LocationDto) GetCustomAttributes() []ResponseAttributeDto {
	if o == nil || IsNil(o.CustomAttributes) {
		var ret []ResponseAttributeDto
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDto) GetCustomAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *LocationDto) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []ResponseAttributeDto and assigns it to the CustomAttributes field.
func (o *LocationDto) SetCustomAttributes(v []ResponseAttributeDto) {
	o.CustomAttributes = v
}

// GetEnabled returns the Enabled field value
func (o *LocationDto) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *LocationDto) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *LocationDto) SetEnabled(v bool) {
	o.Enabled = v
}

// GetSupportMultipleEntries returns the SupportMultipleEntries field value
func (o *LocationDto) GetSupportMultipleEntries() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportMultipleEntries
}

// GetSupportMultipleEntriesOk returns a tuple with the SupportMultipleEntries field value
// and a boolean to check if the value has been set.
func (o *LocationDto) GetSupportMultipleEntriesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportMultipleEntries, true
}

// SetSupportMultipleEntries sets field value
func (o *LocationDto) SetSupportMultipleEntries(v bool) {
	o.SupportMultipleEntries = v
}

// GetSupportKeyManagement returns the SupportKeyManagement field value
func (o *LocationDto) GetSupportKeyManagement() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportKeyManagement
}

// GetSupportKeyManagementOk returns a tuple with the SupportKeyManagement field value
// and a boolean to check if the value has been set.
func (o *LocationDto) GetSupportKeyManagementOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportKeyManagement, true
}

// SetSupportKeyManagement sets field value
func (o *LocationDto) SetSupportKeyManagement(v bool) {
	o.SupportKeyManagement = v
}

// GetCertificates returns the Certificates field value
func (o *LocationDto) GetCertificates() []CertificateInLocationDto {
	if o == nil {
		var ret []CertificateInLocationDto
		return ret
	}

	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value
// and a boolean to check if the value has been set.
func (o *LocationDto) GetCertificatesOk() ([]CertificateInLocationDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificates, true
}

// SetCertificates sets field value
func (o *LocationDto) SetCertificates(v []CertificateInLocationDto) {
	o.Certificates = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *LocationDto) GetMetadata() []MetadataResponseDto {
	if o == nil || IsNil(o.Metadata) {
		var ret []MetadataResponseDto
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDto) GetMetadataOk() ([]MetadataResponseDto, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *LocationDto) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []MetadataResponseDto and assigns it to the Metadata field.
func (o *LocationDto) SetMetadata(v []MetadataResponseDto) {
	o.Metadata = v
}

func (o LocationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["entityInstanceUuid"] = o.EntityInstanceUuid
	toSerialize["entityInstanceName"] = o.EntityInstanceName
	toSerialize["attributes"] = o.Attributes
	if !IsNil(o.CustomAttributes) {
		toSerialize["customAttributes"] = o.CustomAttributes
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["supportMultipleEntries"] = o.SupportMultipleEntries
	toSerialize["supportKeyManagement"] = o.SupportKeyManagement
	toSerialize["certificates"] = o.Certificates
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LocationDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"name",
		"entityInstanceUuid",
		"entityInstanceName",
		"attributes",
		"enabled",
		"supportMultipleEntries",
		"supportKeyManagement",
		"certificates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocationDto := _LocationDto{}

	err = json.Unmarshal(data, &varLocationDto)

	if err != nil {
		return err
	}

	*o = LocationDto(varLocationDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "entityInstanceUuid")
		delete(additionalProperties, "entityInstanceName")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "customAttributes")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "supportMultipleEntries")
		delete(additionalProperties, "supportKeyManagement")
		delete(additionalProperties, "certificates")
		delete(additionalProperties, "metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocationDto struct {
	value *LocationDto
	isSet bool
}

func (v NullableLocationDto) Get() *LocationDto {
	return v.value
}

func (v *NullableLocationDto) Set(val *LocationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationDto(val *LocationDto) *NullableLocationDto {
	return &NullableLocationDto{value: val, isSet: true}
}

func (v NullableLocationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


