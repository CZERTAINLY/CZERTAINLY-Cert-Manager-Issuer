/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// BaseAttributeConstraintDto - Base Attribute Constraint definition
type BaseAttributeConstraintDto struct {
	DateTimeAttributeConstraint *DateTimeAttributeConstraint
	RangeAttributeConstraint *RangeAttributeConstraint
	RegexpAttributeConstraint *RegexpAttributeConstraint
}

// DateTimeAttributeConstraintAsBaseAttributeConstraintDto is a convenience function that returns DateTimeAttributeConstraint wrapped in BaseAttributeConstraintDto
func DateTimeAttributeConstraintAsBaseAttributeConstraintDto(v *DateTimeAttributeConstraint) BaseAttributeConstraintDto {
	return BaseAttributeConstraintDto{
		DateTimeAttributeConstraint: v,
	}
}

// RangeAttributeConstraintAsBaseAttributeConstraintDto is a convenience function that returns RangeAttributeConstraint wrapped in BaseAttributeConstraintDto
func RangeAttributeConstraintAsBaseAttributeConstraintDto(v *RangeAttributeConstraint) BaseAttributeConstraintDto {
	return BaseAttributeConstraintDto{
		RangeAttributeConstraint: v,
	}
}

// RegexpAttributeConstraintAsBaseAttributeConstraintDto is a convenience function that returns RegexpAttributeConstraint wrapped in BaseAttributeConstraintDto
func RegexpAttributeConstraintAsBaseAttributeConstraintDto(v *RegexpAttributeConstraint) BaseAttributeConstraintDto {
	return BaseAttributeConstraintDto{
		RegexpAttributeConstraint: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BaseAttributeConstraintDto) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DateTimeAttributeConstraint
	err = newStrictDecoder(data).Decode(&dst.DateTimeAttributeConstraint)
	if err == nil {
		jsonDateTimeAttributeConstraint, _ := json.Marshal(dst.DateTimeAttributeConstraint)
		if string(jsonDateTimeAttributeConstraint) == "{}" { // empty struct
			dst.DateTimeAttributeConstraint = nil
		} else {
			if err = validator.Validate(dst.DateTimeAttributeConstraint); err != nil {
				dst.DateTimeAttributeConstraint = nil
			} else {
				match++
			}
		}
	} else {
		dst.DateTimeAttributeConstraint = nil
	}

	// try to unmarshal data into RangeAttributeConstraint
	err = newStrictDecoder(data).Decode(&dst.RangeAttributeConstraint)
	if err == nil {
		jsonRangeAttributeConstraint, _ := json.Marshal(dst.RangeAttributeConstraint)
		if string(jsonRangeAttributeConstraint) == "{}" { // empty struct
			dst.RangeAttributeConstraint = nil
		} else {
			if err = validator.Validate(dst.RangeAttributeConstraint); err != nil {
				dst.RangeAttributeConstraint = nil
			} else {
				match++
			}
		}
	} else {
		dst.RangeAttributeConstraint = nil
	}

	// try to unmarshal data into RegexpAttributeConstraint
	err = newStrictDecoder(data).Decode(&dst.RegexpAttributeConstraint)
	if err == nil {
		jsonRegexpAttributeConstraint, _ := json.Marshal(dst.RegexpAttributeConstraint)
		if string(jsonRegexpAttributeConstraint) == "{}" { // empty struct
			dst.RegexpAttributeConstraint = nil
		} else {
			if err = validator.Validate(dst.RegexpAttributeConstraint); err != nil {
				dst.RegexpAttributeConstraint = nil
			} else {
				match++
			}
		}
	} else {
		dst.RegexpAttributeConstraint = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DateTimeAttributeConstraint = nil
		dst.RangeAttributeConstraint = nil
		dst.RegexpAttributeConstraint = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BaseAttributeConstraintDto)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BaseAttributeConstraintDto)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BaseAttributeConstraintDto) MarshalJSON() ([]byte, error) {
	if src.DateTimeAttributeConstraint != nil {
		return json.Marshal(&src.DateTimeAttributeConstraint)
	}

	if src.RangeAttributeConstraint != nil {
		return json.Marshal(&src.RangeAttributeConstraint)
	}

	if src.RegexpAttributeConstraint != nil {
		return json.Marshal(&src.RegexpAttributeConstraint)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BaseAttributeConstraintDto) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DateTimeAttributeConstraint != nil {
		return obj.DateTimeAttributeConstraint
	}

	if obj.RangeAttributeConstraint != nil {
		return obj.RangeAttributeConstraint
	}

	if obj.RegexpAttributeConstraint != nil {
		return obj.RegexpAttributeConstraint
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj BaseAttributeConstraintDto) GetActualInstanceValue() (interface{}) {
	if obj.DateTimeAttributeConstraint != nil {
		return *obj.DateTimeAttributeConstraint
	}

	if obj.RangeAttributeConstraint != nil {
		return *obj.RangeAttributeConstraint
	}

	if obj.RegexpAttributeConstraint != nil {
		return *obj.RegexpAttributeConstraint
	}

	// all schemas are nil
	return nil
}

type NullableBaseAttributeConstraintDto struct {
	value *BaseAttributeConstraintDto
	isSet bool
}

func (v NullableBaseAttributeConstraintDto) Get() *BaseAttributeConstraintDto {
	return v.value
}

func (v *NullableBaseAttributeConstraintDto) Set(val *BaseAttributeConstraintDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseAttributeConstraintDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseAttributeConstraintDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseAttributeConstraintDto(val *BaseAttributeConstraintDto) *NullableBaseAttributeConstraintDto {
	return &NullableBaseAttributeConstraintDto{value: val, isSet: true}
}

func (v NullableBaseAttributeConstraintDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseAttributeConstraintDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


