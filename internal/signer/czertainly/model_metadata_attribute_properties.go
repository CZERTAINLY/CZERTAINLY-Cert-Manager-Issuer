/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the MetadataAttributeProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataAttributeProperties{}

// MetadataAttributeProperties struct for MetadataAttributeProperties
type MetadataAttributeProperties struct {
	// Friendly name of the the Attribute
	Label string `json:"label"`
	// Boolean determining if the Attribute is visible and can be displayed, otherwise it should be hidden to the user.
	Visible bool `json:"visible"`
	// Group of the Attribute, used for the logical grouping of the Attribute
	Group *string `json:"group,omitempty"`
	// Boolean determining if the Metadata is a global metadata.
	Global *bool `json:"global,omitempty"`
	// Boolean determining if the new metadata content should overwrite (replace) existing content instead of appending.
	Overwrite *bool `json:"overwrite,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetadataAttributeProperties MetadataAttributeProperties

// NewMetadataAttributeProperties instantiates a new MetadataAttributeProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataAttributeProperties(label string, visible bool) *MetadataAttributeProperties {
	this := MetadataAttributeProperties{}
	this.Label = label
	this.Visible = visible
	var global bool = false
	this.Global = &global
	var overwrite bool = false
	this.Overwrite = &overwrite
	return &this
}

// NewMetadataAttributePropertiesWithDefaults instantiates a new MetadataAttributeProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataAttributePropertiesWithDefaults() *MetadataAttributeProperties {
	this := MetadataAttributeProperties{}
	var visible bool = true
	this.Visible = visible
	var global bool = false
	this.Global = &global
	var overwrite bool = false
	this.Overwrite = &overwrite
	return &this
}

// GetLabel returns the Label field value
func (o *MetadataAttributeProperties) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *MetadataAttributeProperties) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *MetadataAttributeProperties) SetLabel(v string) {
	o.Label = v
}

// GetVisible returns the Visible field value
func (o *MetadataAttributeProperties) GetVisible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value
// and a boolean to check if the value has been set.
func (o *MetadataAttributeProperties) GetVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visible, true
}

// SetVisible sets field value
func (o *MetadataAttributeProperties) SetVisible(v bool) {
	o.Visible = v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *MetadataAttributeProperties) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataAttributeProperties) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *MetadataAttributeProperties) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *MetadataAttributeProperties) SetGroup(v string) {
	o.Group = &v
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *MetadataAttributeProperties) GetGlobal() bool {
	if o == nil || IsNil(o.Global) {
		var ret bool
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataAttributeProperties) GetGlobalOk() (*bool, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *MetadataAttributeProperties) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given bool and assigns it to the Global field.
func (o *MetadataAttributeProperties) SetGlobal(v bool) {
	o.Global = &v
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise.
func (o *MetadataAttributeProperties) GetOverwrite() bool {
	if o == nil || IsNil(o.Overwrite) {
		var ret bool
		return ret
	}
	return *o.Overwrite
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataAttributeProperties) GetOverwriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Overwrite) {
		return nil, false
	}
	return o.Overwrite, true
}

// HasOverwrite returns a boolean if a field has been set.
func (o *MetadataAttributeProperties) HasOverwrite() bool {
	if o != nil && !IsNil(o.Overwrite) {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given bool and assigns it to the Overwrite field.
func (o *MetadataAttributeProperties) SetOverwrite(v bool) {
	o.Overwrite = &v
}

func (o MetadataAttributeProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataAttributeProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["visible"] = o.Visible
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if !IsNil(o.Overwrite) {
		toSerialize["overwrite"] = o.Overwrite
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetadataAttributeProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"visible",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetadataAttributeProperties := _MetadataAttributeProperties{}

	err = json.Unmarshal(data, &varMetadataAttributeProperties)

	if err != nil {
		return err
	}

	*o = MetadataAttributeProperties(varMetadataAttributeProperties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "visible")
		delete(additionalProperties, "group")
		delete(additionalProperties, "global")
		delete(additionalProperties, "overwrite")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetadataAttributeProperties struct {
	value *MetadataAttributeProperties
	isSet bool
}

func (v NullableMetadataAttributeProperties) Get() *MetadataAttributeProperties {
	return v.value
}

func (v *NullableMetadataAttributeProperties) Set(val *MetadataAttributeProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataAttributeProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataAttributeProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataAttributeProperties(val *MetadataAttributeProperties) *NullableMetadataAttributeProperties {
	return &NullableMetadataAttributeProperties{value: val, isSet: true}
}

func (v NullableMetadataAttributeProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataAttributeProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


