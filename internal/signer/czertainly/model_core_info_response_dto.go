/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the CoreInfoResponseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreInfoResponseDto{}

// CoreInfoResponseDto struct for CoreInfoResponseDto
type CoreInfoResponseDto struct {
	// CZERTAINLY Application information
	App AppInfoDto `json:"app"`
	// Database information
	Db DatabaseInfoDto `json:"db"`
	AdditionalProperties map[string]interface{}
}

type _CoreInfoResponseDto CoreInfoResponseDto

// NewCoreInfoResponseDto instantiates a new CoreInfoResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreInfoResponseDto(app AppInfoDto, db DatabaseInfoDto) *CoreInfoResponseDto {
	this := CoreInfoResponseDto{}
	this.App = app
	this.Db = db
	return &this
}

// NewCoreInfoResponseDtoWithDefaults instantiates a new CoreInfoResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreInfoResponseDtoWithDefaults() *CoreInfoResponseDto {
	this := CoreInfoResponseDto{}
	return &this
}

// GetApp returns the App field value
func (o *CoreInfoResponseDto) GetApp() AppInfoDto {
	if o == nil {
		var ret AppInfoDto
		return ret
	}

	return o.App
}

// GetAppOk returns a tuple with the App field value
// and a boolean to check if the value has been set.
func (o *CoreInfoResponseDto) GetAppOk() (*AppInfoDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.App, true
}

// SetApp sets field value
func (o *CoreInfoResponseDto) SetApp(v AppInfoDto) {
	o.App = v
}

// GetDb returns the Db field value
func (o *CoreInfoResponseDto) GetDb() DatabaseInfoDto {
	if o == nil {
		var ret DatabaseInfoDto
		return ret
	}

	return o.Db
}

// GetDbOk returns a tuple with the Db field value
// and a boolean to check if the value has been set.
func (o *CoreInfoResponseDto) GetDbOk() (*DatabaseInfoDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Db, true
}

// SetDb sets field value
func (o *CoreInfoResponseDto) SetDb(v DatabaseInfoDto) {
	o.Db = v
}

func (o CoreInfoResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreInfoResponseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["app"] = o.App
	toSerialize["db"] = o.Db

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoreInfoResponseDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"app",
		"db",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreInfoResponseDto := _CoreInfoResponseDto{}

	err = json.Unmarshal(data, &varCoreInfoResponseDto)

	if err != nil {
		return err
	}

	*o = CoreInfoResponseDto(varCoreInfoResponseDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "app")
		delete(additionalProperties, "db")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoreInfoResponseDto struct {
	value *CoreInfoResponseDto
	isSet bool
}

func (v NullableCoreInfoResponseDto) Get() *CoreInfoResponseDto {
	return v.value
}

func (v *NullableCoreInfoResponseDto) Set(val *CoreInfoResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreInfoResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreInfoResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreInfoResponseDto(val *CoreInfoResponseDto) *NullableCoreInfoResponseDto {
	return &NullableCoreInfoResponseDto{value: val, isSet: true}
}

func (v NullableCoreInfoResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreInfoResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


