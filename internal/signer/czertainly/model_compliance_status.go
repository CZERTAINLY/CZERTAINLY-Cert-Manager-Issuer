/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// ComplianceStatus the model 'ComplianceStatus'
type ComplianceStatus string

// List of ComplianceStatus
const (
	COMPLIANCESTATUS_NOT_CHECKED ComplianceStatus = "not_checked"
	COMPLIANCESTATUS_OK ComplianceStatus = "ok"
	COMPLIANCESTATUS_NOK ComplianceStatus = "nok"
	COMPLIANCESTATUS_NA ComplianceStatus = "na"
)

// All allowed values of ComplianceStatus enum
var AllowedComplianceStatusEnumValues = []ComplianceStatus{
	"not_checked",
	"ok",
	"nok",
	"na",
}

func (v *ComplianceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ComplianceStatus(value)
	for _, existing := range AllowedComplianceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ComplianceStatus", value)
}

// NewComplianceStatusFromValue returns a pointer to a valid ComplianceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewComplianceStatusFromValue(v string) (*ComplianceStatus, error) {
	ev := ComplianceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ComplianceStatus: valid values are %v", v, AllowedComplianceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ComplianceStatus) IsValid() bool {
	for _, existing := range AllowedComplianceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ComplianceStatus value
func (v ComplianceStatus) Ptr() *ComplianceStatus {
	return &v
}

type NullableComplianceStatus struct {
	value *ComplianceStatus
	isSet bool
}

func (v NullableComplianceStatus) Get() *ComplianceStatus {
	return v.value
}

func (v *NullableComplianceStatus) Set(val *ComplianceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableComplianceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableComplianceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComplianceStatus(val *ComplianceStatus) *NullableComplianceStatus {
	return &NullableComplianceStatus{value: val, isSet: true}
}

func (v NullableComplianceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComplianceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

