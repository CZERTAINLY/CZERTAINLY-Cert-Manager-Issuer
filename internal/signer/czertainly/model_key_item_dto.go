/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the KeyItemDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyItemDto{}

// KeyItemDto struct for KeyItemDto
type KeyItemDto struct {
	// Object identifier
	Uuid string `json:"uuid"`
	// Object Name
	Name string `json:"name"`
	// Description of the Key
	Description *string `json:"description,omitempty"`
	// Creation time of the Key. If the key is discovered from the connector, then it will be returned
	CreationTime time.Time `json:"creationTime"`
	// UUID of the wrapper object
	KeyWrapperUuid string `json:"keyWrapperUuid"`
	// UUID of the Token Profile
	TokenProfileUuid *string `json:"tokenProfileUuid,omitempty"`
	// Name of the Token Profile
	TokenProfileName *string `json:"tokenProfileName,omitempty"`
	// Token Instance UUID
	TokenInstanceUuid *string `json:"tokenInstanceUuid,omitempty"`
	// Token Instance Name
	TokenInstanceName *string `json:"tokenInstanceName,omitempty"`
	// Owner of the Key
	Owner *string `json:"owner,omitempty"`
	// UUID of the owner of the Key
	OwnerUuid *string `json:"ownerUuid,omitempty"`
	// Groups associated to the Key
	Groups []GroupDto `json:"groups,omitempty"`
	// Number of associated objects
	Associations int32 `json:"associations"`
	// UUID of the key item in the Connector
	KeyReferenceUuid *string `json:"keyReferenceUuid,omitempty"`
	// Type of the Key
	Type KeyType `json:"type"`
	// Key Algorithm
	KeyAlgorithm KeyAlgorithm `json:"keyAlgorithm"`
	// Key Format
	Format KeyFormat `json:"format"`
	// Key Length
	Length int32 `json:"length"`
	// Key Usages
	Usage []KeyUsage `json:"usage,omitempty"`
	// Boolean describing if the key is enabled or not
	Enabled bool `json:"enabled"`
	// Key State
	State KeyState `json:"state"`
	AdditionalProperties map[string]interface{}
}

type _KeyItemDto KeyItemDto

// NewKeyItemDto instantiates a new KeyItemDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyItemDto(uuid string, name string, creationTime time.Time, keyWrapperUuid string, associations int32, type_ KeyType, keyAlgorithm KeyAlgorithm, format KeyFormat, length int32, enabled bool, state KeyState) *KeyItemDto {
	this := KeyItemDto{}
	this.Uuid = uuid
	this.Name = name
	this.CreationTime = creationTime
	this.KeyWrapperUuid = keyWrapperUuid
	this.Associations = associations
	this.Type = type_
	this.KeyAlgorithm = keyAlgorithm
	this.Format = format
	this.Length = length
	this.Enabled = enabled
	this.State = state
	return &this
}

// NewKeyItemDtoWithDefaults instantiates a new KeyItemDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyItemDtoWithDefaults() *KeyItemDto {
	this := KeyItemDto{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *KeyItemDto) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *KeyItemDto) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *KeyItemDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KeyItemDto) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *KeyItemDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *KeyItemDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *KeyItemDto) SetDescription(v string) {
	o.Description = &v
}

// GetCreationTime returns the CreationTime field value
func (o *KeyItemDto) GetCreationTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationTime, true
}

// SetCreationTime sets field value
func (o *KeyItemDto) SetCreationTime(v time.Time) {
	o.CreationTime = v
}

// GetKeyWrapperUuid returns the KeyWrapperUuid field value
func (o *KeyItemDto) GetKeyWrapperUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyWrapperUuid
}

// GetKeyWrapperUuidOk returns a tuple with the KeyWrapperUuid field value
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetKeyWrapperUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyWrapperUuid, true
}

// SetKeyWrapperUuid sets field value
func (o *KeyItemDto) SetKeyWrapperUuid(v string) {
	o.KeyWrapperUuid = v
}

// GetTokenProfileUuid returns the TokenProfileUuid field value if set, zero value otherwise.
func (o *KeyItemDto) GetTokenProfileUuid() string {
	if o == nil || IsNil(o.TokenProfileUuid) {
		var ret string
		return ret
	}
	return *o.TokenProfileUuid
}

// GetTokenProfileUuidOk returns a tuple with the TokenProfileUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetTokenProfileUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TokenProfileUuid) {
		return nil, false
	}
	return o.TokenProfileUuid, true
}

// HasTokenProfileUuid returns a boolean if a field has been set.
func (o *KeyItemDto) HasTokenProfileUuid() bool {
	if o != nil && !IsNil(o.TokenProfileUuid) {
		return true
	}

	return false
}

// SetTokenProfileUuid gets a reference to the given string and assigns it to the TokenProfileUuid field.
func (o *KeyItemDto) SetTokenProfileUuid(v string) {
	o.TokenProfileUuid = &v
}

// GetTokenProfileName returns the TokenProfileName field value if set, zero value otherwise.
func (o *KeyItemDto) GetTokenProfileName() string {
	if o == nil || IsNil(o.TokenProfileName) {
		var ret string
		return ret
	}
	return *o.TokenProfileName
}

// GetTokenProfileNameOk returns a tuple with the TokenProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetTokenProfileNameOk() (*string, bool) {
	if o == nil || IsNil(o.TokenProfileName) {
		return nil, false
	}
	return o.TokenProfileName, true
}

// HasTokenProfileName returns a boolean if a field has been set.
func (o *KeyItemDto) HasTokenProfileName() bool {
	if o != nil && !IsNil(o.TokenProfileName) {
		return true
	}

	return false
}

// SetTokenProfileName gets a reference to the given string and assigns it to the TokenProfileName field.
func (o *KeyItemDto) SetTokenProfileName(v string) {
	o.TokenProfileName = &v
}

// GetTokenInstanceUuid returns the TokenInstanceUuid field value if set, zero value otherwise.
func (o *KeyItemDto) GetTokenInstanceUuid() string {
	if o == nil || IsNil(o.TokenInstanceUuid) {
		var ret string
		return ret
	}
	return *o.TokenInstanceUuid
}

// GetTokenInstanceUuidOk returns a tuple with the TokenInstanceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetTokenInstanceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TokenInstanceUuid) {
		return nil, false
	}
	return o.TokenInstanceUuid, true
}

// HasTokenInstanceUuid returns a boolean if a field has been set.
func (o *KeyItemDto) HasTokenInstanceUuid() bool {
	if o != nil && !IsNil(o.TokenInstanceUuid) {
		return true
	}

	return false
}

// SetTokenInstanceUuid gets a reference to the given string and assigns it to the TokenInstanceUuid field.
func (o *KeyItemDto) SetTokenInstanceUuid(v string) {
	o.TokenInstanceUuid = &v
}

// GetTokenInstanceName returns the TokenInstanceName field value if set, zero value otherwise.
func (o *KeyItemDto) GetTokenInstanceName() string {
	if o == nil || IsNil(o.TokenInstanceName) {
		var ret string
		return ret
	}
	return *o.TokenInstanceName
}

// GetTokenInstanceNameOk returns a tuple with the TokenInstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetTokenInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.TokenInstanceName) {
		return nil, false
	}
	return o.TokenInstanceName, true
}

// HasTokenInstanceName returns a boolean if a field has been set.
func (o *KeyItemDto) HasTokenInstanceName() bool {
	if o != nil && !IsNil(o.TokenInstanceName) {
		return true
	}

	return false
}

// SetTokenInstanceName gets a reference to the given string and assigns it to the TokenInstanceName field.
func (o *KeyItemDto) SetTokenInstanceName(v string) {
	o.TokenInstanceName = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *KeyItemDto) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *KeyItemDto) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *KeyItemDto) SetOwner(v string) {
	o.Owner = &v
}

// GetOwnerUuid returns the OwnerUuid field value if set, zero value otherwise.
func (o *KeyItemDto) GetOwnerUuid() string {
	if o == nil || IsNil(o.OwnerUuid) {
		var ret string
		return ret
	}
	return *o.OwnerUuid
}

// GetOwnerUuidOk returns a tuple with the OwnerUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetOwnerUuidOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerUuid) {
		return nil, false
	}
	return o.OwnerUuid, true
}

// HasOwnerUuid returns a boolean if a field has been set.
func (o *KeyItemDto) HasOwnerUuid() bool {
	if o != nil && !IsNil(o.OwnerUuid) {
		return true
	}

	return false
}

// SetOwnerUuid gets a reference to the given string and assigns it to the OwnerUuid field.
func (o *KeyItemDto) SetOwnerUuid(v string) {
	o.OwnerUuid = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *KeyItemDto) GetGroups() []GroupDto {
	if o == nil || IsNil(o.Groups) {
		var ret []GroupDto
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetGroupsOk() ([]GroupDto, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *KeyItemDto) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []GroupDto and assigns it to the Groups field.
func (o *KeyItemDto) SetGroups(v []GroupDto) {
	o.Groups = v
}

// GetAssociations returns the Associations field value
func (o *KeyItemDto) GetAssociations() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Associations
}

// GetAssociationsOk returns a tuple with the Associations field value
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetAssociationsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Associations, true
}

// SetAssociations sets field value
func (o *KeyItemDto) SetAssociations(v int32) {
	o.Associations = v
}

// GetKeyReferenceUuid returns the KeyReferenceUuid field value if set, zero value otherwise.
func (o *KeyItemDto) GetKeyReferenceUuid() string {
	if o == nil || IsNil(o.KeyReferenceUuid) {
		var ret string
		return ret
	}
	return *o.KeyReferenceUuid
}

// GetKeyReferenceUuidOk returns a tuple with the KeyReferenceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetKeyReferenceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.KeyReferenceUuid) {
		return nil, false
	}
	return o.KeyReferenceUuid, true
}

// HasKeyReferenceUuid returns a boolean if a field has been set.
func (o *KeyItemDto) HasKeyReferenceUuid() bool {
	if o != nil && !IsNil(o.KeyReferenceUuid) {
		return true
	}

	return false
}

// SetKeyReferenceUuid gets a reference to the given string and assigns it to the KeyReferenceUuid field.
func (o *KeyItemDto) SetKeyReferenceUuid(v string) {
	o.KeyReferenceUuid = &v
}

// GetType returns the Type field value
func (o *KeyItemDto) GetType() KeyType {
	if o == nil {
		var ret KeyType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetTypeOk() (*KeyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *KeyItemDto) SetType(v KeyType) {
	o.Type = v
}

// GetKeyAlgorithm returns the KeyAlgorithm field value
func (o *KeyItemDto) GetKeyAlgorithm() KeyAlgorithm {
	if o == nil {
		var ret KeyAlgorithm
		return ret
	}

	return o.KeyAlgorithm
}

// GetKeyAlgorithmOk returns a tuple with the KeyAlgorithm field value
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetKeyAlgorithmOk() (*KeyAlgorithm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyAlgorithm, true
}

// SetKeyAlgorithm sets field value
func (o *KeyItemDto) SetKeyAlgorithm(v KeyAlgorithm) {
	o.KeyAlgorithm = v
}

// GetFormat returns the Format field value
func (o *KeyItemDto) GetFormat() KeyFormat {
	if o == nil {
		var ret KeyFormat
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetFormatOk() (*KeyFormat, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *KeyItemDto) SetFormat(v KeyFormat) {
	o.Format = v
}

// GetLength returns the Length field value
func (o *KeyItemDto) GetLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Length
}

// GetLengthOk returns a tuple with the Length field value
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Length, true
}

// SetLength sets field value
func (o *KeyItemDto) SetLength(v int32) {
	o.Length = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *KeyItemDto) GetUsage() []KeyUsage {
	if o == nil || IsNil(o.Usage) {
		var ret []KeyUsage
		return ret
	}
	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetUsageOk() ([]KeyUsage, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *KeyItemDto) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given []KeyUsage and assigns it to the Usage field.
func (o *KeyItemDto) SetUsage(v []KeyUsage) {
	o.Usage = v
}

// GetEnabled returns the Enabled field value
func (o *KeyItemDto) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *KeyItemDto) SetEnabled(v bool) {
	o.Enabled = v
}

// GetState returns the State field value
func (o *KeyItemDto) GetState() KeyState {
	if o == nil {
		var ret KeyState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *KeyItemDto) GetStateOk() (*KeyState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *KeyItemDto) SetState(v KeyState) {
	o.State = v
}

func (o KeyItemDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyItemDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["creationTime"] = o.CreationTime
	toSerialize["keyWrapperUuid"] = o.KeyWrapperUuid
	if !IsNil(o.TokenProfileUuid) {
		toSerialize["tokenProfileUuid"] = o.TokenProfileUuid
	}
	if !IsNil(o.TokenProfileName) {
		toSerialize["tokenProfileName"] = o.TokenProfileName
	}
	if !IsNil(o.TokenInstanceUuid) {
		toSerialize["tokenInstanceUuid"] = o.TokenInstanceUuid
	}
	if !IsNil(o.TokenInstanceName) {
		toSerialize["tokenInstanceName"] = o.TokenInstanceName
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.OwnerUuid) {
		toSerialize["ownerUuid"] = o.OwnerUuid
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	toSerialize["associations"] = o.Associations
	if !IsNil(o.KeyReferenceUuid) {
		toSerialize["keyReferenceUuid"] = o.KeyReferenceUuid
	}
	toSerialize["type"] = o.Type
	toSerialize["keyAlgorithm"] = o.KeyAlgorithm
	toSerialize["format"] = o.Format
	toSerialize["length"] = o.Length
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["state"] = o.State

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeyItemDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"name",
		"creationTime",
		"keyWrapperUuid",
		"associations",
		"type",
		"keyAlgorithm",
		"format",
		"length",
		"enabled",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeyItemDto := _KeyItemDto{}

	err = json.Unmarshal(data, &varKeyItemDto)

	if err != nil {
		return err
	}

	*o = KeyItemDto(varKeyItemDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "creationTime")
		delete(additionalProperties, "keyWrapperUuid")
		delete(additionalProperties, "tokenProfileUuid")
		delete(additionalProperties, "tokenProfileName")
		delete(additionalProperties, "tokenInstanceUuid")
		delete(additionalProperties, "tokenInstanceName")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "ownerUuid")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "associations")
		delete(additionalProperties, "keyReferenceUuid")
		delete(additionalProperties, "type")
		delete(additionalProperties, "keyAlgorithm")
		delete(additionalProperties, "format")
		delete(additionalProperties, "length")
		delete(additionalProperties, "usage")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyItemDto struct {
	value *KeyItemDto
	isSet bool
}

func (v NullableKeyItemDto) Get() *KeyItemDto {
	return v.value
}

func (v *NullableKeyItemDto) Set(val *KeyItemDto) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyItemDto) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyItemDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyItemDto(val *KeyItemDto) *NullableKeyItemDto {
	return &NullableKeyItemDto{value: val, isSet: true}
}

func (v NullableKeyItemDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyItemDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


