/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
)

// checks if the ClientCertificateRenewRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientCertificateRenewRequestDto{}

// ClientCertificateRenewRequestDto struct for ClientCertificateRenewRequestDto
type ClientCertificateRenewRequestDto struct {
	// True to replace renewed certificate in the associated locations
	ReplaceInLocations *bool `json:"replaceInLocations,omitempty"`
	// Certificate signing request encoded as Base64 string. If not provided, Existing CSR will be used
	Request *string `json:"request,omitempty"`
	// Certificate signing request format
	Format *CertificateRequestFormat `json:"format,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClientCertificateRenewRequestDto ClientCertificateRenewRequestDto

// NewClientCertificateRenewRequestDto instantiates a new ClientCertificateRenewRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientCertificateRenewRequestDto() *ClientCertificateRenewRequestDto {
	this := ClientCertificateRenewRequestDto{}
	var replaceInLocations bool = false
	this.ReplaceInLocations = &replaceInLocations
	return &this
}

// NewClientCertificateRenewRequestDtoWithDefaults instantiates a new ClientCertificateRenewRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientCertificateRenewRequestDtoWithDefaults() *ClientCertificateRenewRequestDto {
	this := ClientCertificateRenewRequestDto{}
	var replaceInLocations bool = false
	this.ReplaceInLocations = &replaceInLocations
	return &this
}

// GetReplaceInLocations returns the ReplaceInLocations field value if set, zero value otherwise.
func (o *ClientCertificateRenewRequestDto) GetReplaceInLocations() bool {
	if o == nil || IsNil(o.ReplaceInLocations) {
		var ret bool
		return ret
	}
	return *o.ReplaceInLocations
}

// GetReplaceInLocationsOk returns a tuple with the ReplaceInLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientCertificateRenewRequestDto) GetReplaceInLocationsOk() (*bool, bool) {
	if o == nil || IsNil(o.ReplaceInLocations) {
		return nil, false
	}
	return o.ReplaceInLocations, true
}

// HasReplaceInLocations returns a boolean if a field has been set.
func (o *ClientCertificateRenewRequestDto) HasReplaceInLocations() bool {
	if o != nil && !IsNil(o.ReplaceInLocations) {
		return true
	}

	return false
}

// SetReplaceInLocations gets a reference to the given bool and assigns it to the ReplaceInLocations field.
func (o *ClientCertificateRenewRequestDto) SetReplaceInLocations(v bool) {
	o.ReplaceInLocations = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *ClientCertificateRenewRequestDto) GetRequest() string {
	if o == nil || IsNil(o.Request) {
		var ret string
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientCertificateRenewRequestDto) GetRequestOk() (*string, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *ClientCertificateRenewRequestDto) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given string and assigns it to the Request field.
func (o *ClientCertificateRenewRequestDto) SetRequest(v string) {
	o.Request = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ClientCertificateRenewRequestDto) GetFormat() CertificateRequestFormat {
	if o == nil || IsNil(o.Format) {
		var ret CertificateRequestFormat
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientCertificateRenewRequestDto) GetFormatOk() (*CertificateRequestFormat, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ClientCertificateRenewRequestDto) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given CertificateRequestFormat and assigns it to the Format field.
func (o *ClientCertificateRenewRequestDto) SetFormat(v CertificateRequestFormat) {
	o.Format = &v
}

func (o ClientCertificateRenewRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientCertificateRenewRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReplaceInLocations) {
		toSerialize["replaceInLocations"] = o.ReplaceInLocations
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClientCertificateRenewRequestDto) UnmarshalJSON(data []byte) (err error) {
	varClientCertificateRenewRequestDto := _ClientCertificateRenewRequestDto{}

	err = json.Unmarshal(data, &varClientCertificateRenewRequestDto)

	if err != nil {
		return err
	}

	*o = ClientCertificateRenewRequestDto(varClientCertificateRenewRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "replaceInLocations")
		delete(additionalProperties, "request")
		delete(additionalProperties, "format")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClientCertificateRenewRequestDto struct {
	value *ClientCertificateRenewRequestDto
	isSet bool
}

func (v NullableClientCertificateRenewRequestDto) Get() *ClientCertificateRenewRequestDto {
	return v.value
}

func (v *NullableClientCertificateRenewRequestDto) Set(val *ClientCertificateRenewRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableClientCertificateRenewRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableClientCertificateRenewRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientCertificateRenewRequestDto(val *ClientCertificateRenewRequestDto) *NullableClientCertificateRenewRequestDto {
	return &NullableClientCertificateRenewRequestDto{value: val, isSet: true}
}

func (v NullableClientCertificateRenewRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientCertificateRenewRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


