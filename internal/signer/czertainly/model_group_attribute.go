/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the GroupAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupAttribute{}

// GroupAttribute Group attribute and its content represents dynamic list of additional attributes retrieved by callback. Its content can not be edited and is not send in requests to store.
type GroupAttribute struct {
	// Version of the Attribute
	Version *int32 `json:"version,omitempty"`
	// UUID of the Attribute for unique identification
	Uuid string `json:"uuid"`
	// Name of the Attribute that is used for identification
	Name string `json:"name"`
	// Optional description of the Attribute, should contain helper text on what is expected
	Description *string `json:"description,omitempty"`
	Content []BaseAttributeDto `json:"content,omitempty"`
	// Type of the Attribute
	Type AttributeType `json:"type"`
	// Optional definition of callback for getting the content of the Attribute based on the action
	AttributeCallback *AttributeCallback `json:"attributeCallback,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GroupAttribute GroupAttribute

// NewGroupAttribute instantiates a new GroupAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupAttribute(uuid string, name string, type_ AttributeType) *GroupAttribute {
	this := GroupAttribute{}
	var version int32 = 2
	this.Version = &version
	this.Uuid = uuid
	this.Name = name
	this.Type = type_
	return &this
}

// NewGroupAttributeWithDefaults instantiates a new GroupAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupAttributeWithDefaults() *GroupAttribute {
	this := GroupAttribute{}
	var version int32 = 2
	this.Version = &version
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *GroupAttribute) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAttribute) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *GroupAttribute) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *GroupAttribute) SetVersion(v int32) {
	o.Version = &v
}

// GetUuid returns the Uuid field value
func (o *GroupAttribute) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *GroupAttribute) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *GroupAttribute) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *GroupAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GroupAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GroupAttribute) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GroupAttribute) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAttribute) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GroupAttribute) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GroupAttribute) SetDescription(v string) {
	o.Description = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *GroupAttribute) GetContent() []BaseAttributeDto {
	if o == nil || IsNil(o.Content) {
		var ret []BaseAttributeDto
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAttribute) GetContentOk() ([]BaseAttributeDto, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *GroupAttribute) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given []BaseAttributeDto and assigns it to the Content field.
func (o *GroupAttribute) SetContent(v []BaseAttributeDto) {
	o.Content = v
}

// GetType returns the Type field value
func (o *GroupAttribute) GetType() AttributeType {
	if o == nil {
		var ret AttributeType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GroupAttribute) GetTypeOk() (*AttributeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GroupAttribute) SetType(v AttributeType) {
	o.Type = v
}

// GetAttributeCallback returns the AttributeCallback field value if set, zero value otherwise.
func (o *GroupAttribute) GetAttributeCallback() AttributeCallback {
	if o == nil || IsNil(o.AttributeCallback) {
		var ret AttributeCallback
		return ret
	}
	return *o.AttributeCallback
}

// GetAttributeCallbackOk returns a tuple with the AttributeCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAttribute) GetAttributeCallbackOk() (*AttributeCallback, bool) {
	if o == nil || IsNil(o.AttributeCallback) {
		return nil, false
	}
	return o.AttributeCallback, true
}

// HasAttributeCallback returns a boolean if a field has been set.
func (o *GroupAttribute) HasAttributeCallback() bool {
	if o != nil && !IsNil(o.AttributeCallback) {
		return true
	}

	return false
}

// SetAttributeCallback gets a reference to the given AttributeCallback and assigns it to the AttributeCallback field.
func (o *GroupAttribute) SetAttributeCallback(v AttributeCallback) {
	o.AttributeCallback = &v
}

func (o GroupAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.AttributeCallback) {
		toSerialize["attributeCallback"] = o.AttributeCallback
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GroupAttribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupAttribute := _GroupAttribute{}

	err = json.Unmarshal(data, &varGroupAttribute)

	if err != nil {
		return err
	}

	*o = GroupAttribute(varGroupAttribute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "content")
		delete(additionalProperties, "type")
		delete(additionalProperties, "attributeCallback")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGroupAttribute struct {
	value *GroupAttribute
	isSet bool
}

func (v NullableGroupAttribute) Get() *GroupAttribute {
	return v.value
}

func (v *NullableGroupAttribute) Set(val *GroupAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupAttribute(val *GroupAttribute) *NullableGroupAttribute {
	return &NullableGroupAttribute{value: val, isSet: true}
}

func (v NullableGroupAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


