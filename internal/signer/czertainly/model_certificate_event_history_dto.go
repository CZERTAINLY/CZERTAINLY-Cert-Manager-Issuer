/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CertificateEventHistoryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateEventHistoryDto{}

// CertificateEventHistoryDto struct for CertificateEventHistoryDto
type CertificateEventHistoryDto struct {
	// UUID of the event
	Uuid string `json:"uuid"`
	// UUID of the Certificate
	CertificateUuid string `json:"certificateUuid"`
	// Event creation time
	Created time.Time `json:"created"`
	// Created By
	CreatedBy string `json:"createdBy"`
	// Event type
	Event string `json:"event"`
	// Event result
	Status string `json:"status"`
	// Event message
	Message string `json:"message"`
	// Additional information for the event
	AdditionalInformation map[string]map[string]interface{} `json:"additionalInformation,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateEventHistoryDto CertificateEventHistoryDto

// NewCertificateEventHistoryDto instantiates a new CertificateEventHistoryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateEventHistoryDto(uuid string, certificateUuid string, created time.Time, createdBy string, event string, status string, message string) *CertificateEventHistoryDto {
	this := CertificateEventHistoryDto{}
	this.Uuid = uuid
	this.CertificateUuid = certificateUuid
	this.Created = created
	this.CreatedBy = createdBy
	this.Event = event
	this.Status = status
	this.Message = message
	return &this
}

// NewCertificateEventHistoryDtoWithDefaults instantiates a new CertificateEventHistoryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateEventHistoryDtoWithDefaults() *CertificateEventHistoryDto {
	this := CertificateEventHistoryDto{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *CertificateEventHistoryDto) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *CertificateEventHistoryDto) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *CertificateEventHistoryDto) SetUuid(v string) {
	o.Uuid = v
}

// GetCertificateUuid returns the CertificateUuid field value
func (o *CertificateEventHistoryDto) GetCertificateUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateUuid
}

// GetCertificateUuidOk returns a tuple with the CertificateUuid field value
// and a boolean to check if the value has been set.
func (o *CertificateEventHistoryDto) GetCertificateUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateUuid, true
}

// SetCertificateUuid sets field value
func (o *CertificateEventHistoryDto) SetCertificateUuid(v string) {
	o.CertificateUuid = v
}

// GetCreated returns the Created field value
func (o *CertificateEventHistoryDto) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *CertificateEventHistoryDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *CertificateEventHistoryDto) SetCreated(v time.Time) {
	o.Created = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *CertificateEventHistoryDto) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *CertificateEventHistoryDto) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *CertificateEventHistoryDto) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetEvent returns the Event field value
func (o *CertificateEventHistoryDto) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *CertificateEventHistoryDto) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *CertificateEventHistoryDto) SetEvent(v string) {
	o.Event = v
}

// GetStatus returns the Status field value
func (o *CertificateEventHistoryDto) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CertificateEventHistoryDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CertificateEventHistoryDto) SetStatus(v string) {
	o.Status = v
}

// GetMessage returns the Message field value
func (o *CertificateEventHistoryDto) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CertificateEventHistoryDto) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CertificateEventHistoryDto) SetMessage(v string) {
	o.Message = v
}

// GetAdditionalInformation returns the AdditionalInformation field value if set, zero value otherwise.
func (o *CertificateEventHistoryDto) GetAdditionalInformation() map[string]map[string]interface{} {
	if o == nil || IsNil(o.AdditionalInformation) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.AdditionalInformation
}

// GetAdditionalInformationOk returns a tuple with the AdditionalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateEventHistoryDto) GetAdditionalInformationOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalInformation) {
		return map[string]map[string]interface{}{}, false
	}
	return o.AdditionalInformation, true
}

// HasAdditionalInformation returns a boolean if a field has been set.
func (o *CertificateEventHistoryDto) HasAdditionalInformation() bool {
	if o != nil && !IsNil(o.AdditionalInformation) {
		return true
	}

	return false
}

// SetAdditionalInformation gets a reference to the given map[string]map[string]interface{} and assigns it to the AdditionalInformation field.
func (o *CertificateEventHistoryDto) SetAdditionalInformation(v map[string]map[string]interface{}) {
	o.AdditionalInformation = v
}

func (o CertificateEventHistoryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateEventHistoryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["certificateUuid"] = o.CertificateUuid
	toSerialize["created"] = o.Created
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["event"] = o.Event
	toSerialize["status"] = o.Status
	toSerialize["message"] = o.Message
	if !IsNil(o.AdditionalInformation) {
		toSerialize["additionalInformation"] = o.AdditionalInformation
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateEventHistoryDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"certificateUuid",
		"created",
		"createdBy",
		"event",
		"status",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateEventHistoryDto := _CertificateEventHistoryDto{}

	err = json.Unmarshal(data, &varCertificateEventHistoryDto)

	if err != nil {
		return err
	}

	*o = CertificateEventHistoryDto(varCertificateEventHistoryDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "certificateUuid")
		delete(additionalProperties, "created")
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "event")
		delete(additionalProperties, "status")
		delete(additionalProperties, "message")
		delete(additionalProperties, "additionalInformation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateEventHistoryDto struct {
	value *CertificateEventHistoryDto
	isSet bool
}

func (v NullableCertificateEventHistoryDto) Get() *CertificateEventHistoryDto {
	return v.value
}

func (v *NullableCertificateEventHistoryDto) Set(val *CertificateEventHistoryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateEventHistoryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateEventHistoryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateEventHistoryDto(val *CertificateEventHistoryDto) *NullableCertificateEventHistoryDto {
	return &NullableCertificateEventHistoryDto{value: val, isSet: true}
}

func (v NullableCertificateEventHistoryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateEventHistoryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


