/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the ApprovalResponseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalResponseDto{}

// ApprovalResponseDto struct for ApprovalResponseDto
type ApprovalResponseDto struct {
	// Number of entries per page
	ItemsPerPage int32 `json:"itemsPerPage"`
	// Page number for the request
	PageNumber int32 `json:"pageNumber"`
	// Number of pages available
	TotalPages int32 `json:"totalPages"`
	// Number of items available
	TotalItems int64 `json:"totalItems"`
	// List of the Approvals
	Approvals []ApprovalDto `json:"approvals"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalResponseDto ApprovalResponseDto

// NewApprovalResponseDto instantiates a new ApprovalResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalResponseDto(itemsPerPage int32, pageNumber int32, totalPages int32, totalItems int64, approvals []ApprovalDto) *ApprovalResponseDto {
	this := ApprovalResponseDto{}
	this.ItemsPerPage = itemsPerPage
	this.PageNumber = pageNumber
	this.TotalPages = totalPages
	this.TotalItems = totalItems
	this.Approvals = approvals
	return &this
}

// NewApprovalResponseDtoWithDefaults instantiates a new ApprovalResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalResponseDtoWithDefaults() *ApprovalResponseDto {
	this := ApprovalResponseDto{}
	return &this
}

// GetItemsPerPage returns the ItemsPerPage field value
func (o *ApprovalResponseDto) GetItemsPerPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ItemsPerPage
}

// GetItemsPerPageOk returns a tuple with the ItemsPerPage field value
// and a boolean to check if the value has been set.
func (o *ApprovalResponseDto) GetItemsPerPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemsPerPage, true
}

// SetItemsPerPage sets field value
func (o *ApprovalResponseDto) SetItemsPerPage(v int32) {
	o.ItemsPerPage = v
}

// GetPageNumber returns the PageNumber field value
func (o *ApprovalResponseDto) GetPageNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value
// and a boolean to check if the value has been set.
func (o *ApprovalResponseDto) GetPageNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageNumber, true
}

// SetPageNumber sets field value
func (o *ApprovalResponseDto) SetPageNumber(v int32) {
	o.PageNumber = v
}

// GetTotalPages returns the TotalPages field value
func (o *ApprovalResponseDto) GetTotalPages() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value
// and a boolean to check if the value has been set.
func (o *ApprovalResponseDto) GetTotalPagesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPages, true
}

// SetTotalPages sets field value
func (o *ApprovalResponseDto) SetTotalPages(v int32) {
	o.TotalPages = v
}

// GetTotalItems returns the TotalItems field value
func (o *ApprovalResponseDto) GetTotalItems() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalItems
}

// GetTotalItemsOk returns a tuple with the TotalItems field value
// and a boolean to check if the value has been set.
func (o *ApprovalResponseDto) GetTotalItemsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalItems, true
}

// SetTotalItems sets field value
func (o *ApprovalResponseDto) SetTotalItems(v int64) {
	o.TotalItems = v
}

// GetApprovals returns the Approvals field value
func (o *ApprovalResponseDto) GetApprovals() []ApprovalDto {
	if o == nil {
		var ret []ApprovalDto
		return ret
	}

	return o.Approvals
}

// GetApprovalsOk returns a tuple with the Approvals field value
// and a boolean to check if the value has been set.
func (o *ApprovalResponseDto) GetApprovalsOk() ([]ApprovalDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Approvals, true
}

// SetApprovals sets field value
func (o *ApprovalResponseDto) SetApprovals(v []ApprovalDto) {
	o.Approvals = v
}

func (o ApprovalResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalResponseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["itemsPerPage"] = o.ItemsPerPage
	toSerialize["pageNumber"] = o.PageNumber
	toSerialize["totalPages"] = o.TotalPages
	toSerialize["totalItems"] = o.TotalItems
	toSerialize["approvals"] = o.Approvals

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalResponseDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"itemsPerPage",
		"pageNumber",
		"totalPages",
		"totalItems",
		"approvals",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApprovalResponseDto := _ApprovalResponseDto{}

	err = json.Unmarshal(data, &varApprovalResponseDto)

	if err != nil {
		return err
	}

	*o = ApprovalResponseDto(varApprovalResponseDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "itemsPerPage")
		delete(additionalProperties, "pageNumber")
		delete(additionalProperties, "totalPages")
		delete(additionalProperties, "totalItems")
		delete(additionalProperties, "approvals")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalResponseDto struct {
	value *ApprovalResponseDto
	isSet bool
}

func (v NullableApprovalResponseDto) Get() *ApprovalResponseDto {
	return v.value
}

func (v *NullableApprovalResponseDto) Set(val *ApprovalResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalResponseDto(val *ApprovalResponseDto) *NullableApprovalResponseDto {
	return &NullableApprovalResponseDto{value: val, isSet: true}
}

func (v NullableApprovalResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


