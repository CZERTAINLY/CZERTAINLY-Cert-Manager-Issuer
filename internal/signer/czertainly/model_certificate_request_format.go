/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// CertificateRequestFormat the model 'CertificateRequestFormat'
type CertificateRequestFormat string

// List of CertificateRequestFormat
const (
	CERTIFICATEREQUESTFORMAT_PKCS10 CertificateRequestFormat = "pkcs10"
	CERTIFICATEREQUESTFORMAT_CRMF CertificateRequestFormat = "crmf"
)

// All allowed values of CertificateRequestFormat enum
var AllowedCertificateRequestFormatEnumValues = []CertificateRequestFormat{
	"pkcs10",
	"crmf",
}

func (v *CertificateRequestFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CertificateRequestFormat(value)
	for _, existing := range AllowedCertificateRequestFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CertificateRequestFormat", value)
}

// NewCertificateRequestFormatFromValue returns a pointer to a valid CertificateRequestFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCertificateRequestFormatFromValue(v string) (*CertificateRequestFormat, error) {
	ev := CertificateRequestFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CertificateRequestFormat: valid values are %v", v, AllowedCertificateRequestFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CertificateRequestFormat) IsValid() bool {
	for _, existing := range AllowedCertificateRequestFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CertificateRequestFormat value
func (v CertificateRequestFormat) Ptr() *CertificateRequestFormat {
	return &v
}

type NullableCertificateRequestFormat struct {
	value *CertificateRequestFormat
	isSet bool
}

func (v NullableCertificateRequestFormat) Get() *CertificateRequestFormat {
	return v.value
}

func (v *NullableCertificateRequestFormat) Set(val *CertificateRequestFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateRequestFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateRequestFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateRequestFormat(val *CertificateRequestFormat) *NullableCertificateRequestFormat {
	return &NullableCertificateRequestFormat{value: val, isSet: true}
}

func (v NullableCertificateRequestFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateRequestFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

