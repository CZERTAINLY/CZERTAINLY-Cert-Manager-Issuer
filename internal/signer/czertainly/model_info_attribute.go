/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the InfoAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfoAttribute{}

// InfoAttribute Info attribute contains content that is for information purpose or represents additional information for object (metadata). Its content can not be edited and is not send in requests to store.
type InfoAttribute struct {
	// Version of the Attribute
	Version *int32 `json:"version,omitempty"`
	// UUID of the Attribute for unique identification
	Uuid string `json:"uuid"`
	// Name of the Attribute that is used for identification
	Name string `json:"name"`
	// Optional description of the Attribute, should contain helper text on what is expected
	Description *string `json:"description,omitempty"`
	// Content of the Attribute
	Content []BaseAttributeContentDto `json:"content"`
	// Type of the Attribute
	Type AttributeType `json:"type"`
	// Type of the Content
	ContentType AttributeContentType `json:"contentType"`
	// Properties of the Attributes
	Properties InfoAttributeProperties `json:"properties"`
	AdditionalProperties map[string]interface{}
}

type _InfoAttribute InfoAttribute

// NewInfoAttribute instantiates a new InfoAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoAttribute(uuid string, name string, content []BaseAttributeContentDto, type_ AttributeType, contentType AttributeContentType, properties InfoAttributeProperties) *InfoAttribute {
	this := InfoAttribute{}
	var version int32 = 2
	this.Version = &version
	this.Uuid = uuid
	this.Name = name
	this.Content = content
	this.Type = type_
	this.ContentType = contentType
	this.Properties = properties
	return &this
}

// NewInfoAttributeWithDefaults instantiates a new InfoAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoAttributeWithDefaults() *InfoAttribute {
	this := InfoAttribute{}
	var version int32 = 2
	this.Version = &version
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InfoAttribute) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoAttribute) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InfoAttribute) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *InfoAttribute) SetVersion(v int32) {
	o.Version = &v
}

// GetUuid returns the Uuid field value
func (o *InfoAttribute) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *InfoAttribute) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *InfoAttribute) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *InfoAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InfoAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InfoAttribute) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InfoAttribute) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoAttribute) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InfoAttribute) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InfoAttribute) SetDescription(v string) {
	o.Description = &v
}

// GetContent returns the Content field value
func (o *InfoAttribute) GetContent() []BaseAttributeContentDto {
	if o == nil {
		var ret []BaseAttributeContentDto
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *InfoAttribute) GetContentOk() ([]BaseAttributeContentDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content, true
}

// SetContent sets field value
func (o *InfoAttribute) SetContent(v []BaseAttributeContentDto) {
	o.Content = v
}

// GetType returns the Type field value
func (o *InfoAttribute) GetType() AttributeType {
	if o == nil {
		var ret AttributeType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InfoAttribute) GetTypeOk() (*AttributeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InfoAttribute) SetType(v AttributeType) {
	o.Type = v
}

// GetContentType returns the ContentType field value
func (o *InfoAttribute) GetContentType() AttributeContentType {
	if o == nil {
		var ret AttributeContentType
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *InfoAttribute) GetContentTypeOk() (*AttributeContentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *InfoAttribute) SetContentType(v AttributeContentType) {
	o.ContentType = v
}

// GetProperties returns the Properties field value
func (o *InfoAttribute) GetProperties() InfoAttributeProperties {
	if o == nil {
		var ret InfoAttributeProperties
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *InfoAttribute) GetPropertiesOk() (*InfoAttributeProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *InfoAttribute) SetProperties(v InfoAttributeProperties) {
	o.Properties = v
}

func (o InfoAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfoAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["content"] = o.Content
	toSerialize["type"] = o.Type
	toSerialize["contentType"] = o.ContentType
	toSerialize["properties"] = o.Properties

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfoAttribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"name",
		"content",
		"type",
		"contentType",
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfoAttribute := _InfoAttribute{}

	err = json.Unmarshal(data, &varInfoAttribute)

	if err != nil {
		return err
	}

	*o = InfoAttribute(varInfoAttribute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "content")
		delete(additionalProperties, "type")
		delete(additionalProperties, "contentType")
		delete(additionalProperties, "properties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfoAttribute struct {
	value *InfoAttribute
	isSet bool
}

func (v NullableInfoAttribute) Get() *InfoAttribute {
	return v.value
}

func (v *NullableInfoAttribute) Set(val *InfoAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoAttribute(val *InfoAttribute) *NullableInfoAttribute {
	return &NullableInfoAttribute{value: val, isSet: true}
}

func (v NullableInfoAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


