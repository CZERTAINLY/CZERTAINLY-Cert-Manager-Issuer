/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CertificateDetailDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateDetailDto{}

// CertificateDetailDto struct for CertificateDetailDto
type CertificateDetailDto struct {
	// UUID of the Certificate
	Uuid string `json:"uuid"`
	// Certificate common name
	CommonName string `json:"commonName"`
	// Certificate serial number
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Certificate issuer common name
	IssuerCommonName *string `json:"issuerCommonName,omitempty"`
	// Issuer DN of the Certificate
	IssuerDn *string `json:"issuerDn,omitempty"`
	// Subject DN of the Certificate
	SubjectDn string `json:"subjectDn"`
	// Certificate validity start date
	NotBefore *time.Time `json:"notBefore,omitempty"`
	// Certificate expiration date
	NotAfter *time.Time `json:"notAfter,omitempty"`
	// Public key algorithm
	PublicKeyAlgorithm string `json:"publicKeyAlgorithm"`
	// Certificate signature algorithm
	SignatureAlgorithm string `json:"signatureAlgorithm"`
	// Certificate key size
	KeySize int32 `json:"keySize"`
	// State of the Certificate
	State CertificateState `json:"state"`
	// Current validation status of the certificate
	ValidationStatus CertificateValidationStatus `json:"validationStatus"`
	// RA Profile associated to the Certificate
	RaProfile *SimplifiedRaProfileDto `json:"raProfile,omitempty"`
	// SHA256 fingerprint of the Certificate
	Fingerprint *string `json:"fingerprint,omitempty"`
	// Groups associated to the Certificate
	Groups []GroupDto `json:"groups,omitempty"`
	// Certificate Owner
	Owner *string `json:"owner,omitempty"`
	// Certificate Owner UUID
	OwnerUuid *string `json:"ownerUuid,omitempty"`
	// Certificate type
	CertificateType CertificateType `json:"certificateType"`
	// Serial number of the issuer
	IssuerSerialNumber *string `json:"issuerSerialNumber,omitempty"`
	// Certificate compliance status
	ComplianceStatus ComplianceStatus `json:"complianceStatus"`
	// UUID of the issuer certificate
	IssuerCertificateUuid *string `json:"issuerCertificateUuid,omitempty"`
	// Private Key Availability
	PrivateKeyAvailability bool `json:"privateKeyAvailability"`
	// Indicator whether CA is marked as trusted, set to null if certificate is not CA
	TrustedCa *bool `json:"trustedCa,omitempty"`
	// Extended key usages
	ExtendedKeyUsage []string `json:"extendedKeyUsage,omitempty"`
	// Key usages
	KeyUsage []string `json:"keyUsage,omitempty"`
	// Certificate subject type
	SubjectType *CertificateSubjectType `json:"subjectType,omitempty"`
	// Certificate metadata
	Metadata []MetadataResponseDto `json:"metadata,omitempty"`
	// Base64 encoded Certificate content
	CertificateContent *string `json:"certificateContent,omitempty"`
	// Subject alternative names
	SubjectAlternativeNames map[string][]string `json:"subjectAlternativeNames,omitempty"`
	// Locations associated to the Certificate
	Locations []LocationDto `json:"locations,omitempty"`
	// Certificate compliance check result
	NonCompliantRules []CertificateComplianceResultDto `json:"nonCompliantRules,omitempty"`
	// List of Custom Attributes
	CustomAttributes []ResponseAttributeDto `json:"customAttributes,omitempty"`
	// Key Pair of the certificate
	Key *KeyDto `json:"key,omitempty"`
	// Certificate request data
	CertificateRequest *CertificateRequestDto `json:"certificateRequest,omitempty"`
	// Source certificate UUID
	SourceCertificateUuid *string `json:"sourceCertificateUuid,omitempty"`
	// List of issue attributes
	IssueAttributes []ResponseAttributeDto `json:"issueAttributes,omitempty"`
	// List of revoke attributes
	RevokeAttributes []ResponseAttributeDto `json:"revokeAttributes,omitempty"`
	// List of related certificates
	RelatedCertificates []CertificateDto `json:"relatedCertificates,omitempty"`
	// Information about protocol used to issue the certificate
	ProtocolInfo *CertificateProtocolDto `json:"protocolInfo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateDetailDto CertificateDetailDto

// NewCertificateDetailDto instantiates a new CertificateDetailDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateDetailDto(uuid string, commonName string, subjectDn string, publicKeyAlgorithm string, signatureAlgorithm string, keySize int32, state CertificateState, validationStatus CertificateValidationStatus, certificateType CertificateType, complianceStatus ComplianceStatus, privateKeyAvailability bool) *CertificateDetailDto {
	this := CertificateDetailDto{}
	this.Uuid = uuid
	this.CommonName = commonName
	this.SubjectDn = subjectDn
	this.PublicKeyAlgorithm = publicKeyAlgorithm
	this.SignatureAlgorithm = signatureAlgorithm
	this.KeySize = keySize
	this.State = state
	this.ValidationStatus = validationStatus
	this.CertificateType = certificateType
	this.ComplianceStatus = complianceStatus
	this.PrivateKeyAvailability = privateKeyAvailability
	return &this
}

// NewCertificateDetailDtoWithDefaults instantiates a new CertificateDetailDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateDetailDtoWithDefaults() *CertificateDetailDto {
	this := CertificateDetailDto{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *CertificateDetailDto) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *CertificateDetailDto) SetUuid(v string) {
	o.Uuid = v
}

// GetCommonName returns the CommonName field value
func (o *CertificateDetailDto) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *CertificateDetailDto) SetCommonName(v string) {
	o.CommonName = v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *CertificateDetailDto) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetIssuerCommonName returns the IssuerCommonName field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetIssuerCommonName() string {
	if o == nil || IsNil(o.IssuerCommonName) {
		var ret string
		return ret
	}
	return *o.IssuerCommonName
}

// GetIssuerCommonNameOk returns a tuple with the IssuerCommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetIssuerCommonNameOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerCommonName) {
		return nil, false
	}
	return o.IssuerCommonName, true
}

// HasIssuerCommonName returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasIssuerCommonName() bool {
	if o != nil && !IsNil(o.IssuerCommonName) {
		return true
	}

	return false
}

// SetIssuerCommonName gets a reference to the given string and assigns it to the IssuerCommonName field.
func (o *CertificateDetailDto) SetIssuerCommonName(v string) {
	o.IssuerCommonName = &v
}

// GetIssuerDn returns the IssuerDn field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetIssuerDn() string {
	if o == nil || IsNil(o.IssuerDn) {
		var ret string
		return ret
	}
	return *o.IssuerDn
}

// GetIssuerDnOk returns a tuple with the IssuerDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetIssuerDnOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerDn) {
		return nil, false
	}
	return o.IssuerDn, true
}

// HasIssuerDn returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasIssuerDn() bool {
	if o != nil && !IsNil(o.IssuerDn) {
		return true
	}

	return false
}

// SetIssuerDn gets a reference to the given string and assigns it to the IssuerDn field.
func (o *CertificateDetailDto) SetIssuerDn(v string) {
	o.IssuerDn = &v
}

// GetSubjectDn returns the SubjectDn field value
func (o *CertificateDetailDto) GetSubjectDn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectDn
}

// GetSubjectDnOk returns a tuple with the SubjectDn field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetSubjectDnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectDn, true
}

// SetSubjectDn sets field value
func (o *CertificateDetailDto) SetSubjectDn(v string) {
	o.SubjectDn = v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetNotBefore() time.Time {
	if o == nil || IsNil(o.NotBefore) {
		var ret time.Time
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetNotBeforeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NotBefore) {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasNotBefore() bool {
	if o != nil && !IsNil(o.NotBefore) {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given time.Time and assigns it to the NotBefore field.
func (o *CertificateDetailDto) SetNotBefore(v time.Time) {
	o.NotBefore = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetNotAfter() time.Time {
	if o == nil || IsNil(o.NotAfter) {
		var ret time.Time
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetNotAfterOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NotAfter) {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasNotAfter() bool {
	if o != nil && !IsNil(o.NotAfter) {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given time.Time and assigns it to the NotAfter field.
func (o *CertificateDetailDto) SetNotAfter(v time.Time) {
	o.NotAfter = &v
}

// GetPublicKeyAlgorithm returns the PublicKeyAlgorithm field value
func (o *CertificateDetailDto) GetPublicKeyAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKeyAlgorithm
}

// GetPublicKeyAlgorithmOk returns a tuple with the PublicKeyAlgorithm field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetPublicKeyAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKeyAlgorithm, true
}

// SetPublicKeyAlgorithm sets field value
func (o *CertificateDetailDto) SetPublicKeyAlgorithm(v string) {
	o.PublicKeyAlgorithm = v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value
func (o *CertificateDetailDto) GetSignatureAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetSignatureAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureAlgorithm, true
}

// SetSignatureAlgorithm sets field value
func (o *CertificateDetailDto) SetSignatureAlgorithm(v string) {
	o.SignatureAlgorithm = v
}

// GetKeySize returns the KeySize field value
func (o *CertificateDetailDto) GetKeySize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KeySize
}

// GetKeySizeOk returns a tuple with the KeySize field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetKeySizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeySize, true
}

// SetKeySize sets field value
func (o *CertificateDetailDto) SetKeySize(v int32) {
	o.KeySize = v
}

// GetState returns the State field value
func (o *CertificateDetailDto) GetState() CertificateState {
	if o == nil {
		var ret CertificateState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetStateOk() (*CertificateState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CertificateDetailDto) SetState(v CertificateState) {
	o.State = v
}

// GetValidationStatus returns the ValidationStatus field value
func (o *CertificateDetailDto) GetValidationStatus() CertificateValidationStatus {
	if o == nil {
		var ret CertificateValidationStatus
		return ret
	}

	return o.ValidationStatus
}

// GetValidationStatusOk returns a tuple with the ValidationStatus field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetValidationStatusOk() (*CertificateValidationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidationStatus, true
}

// SetValidationStatus sets field value
func (o *CertificateDetailDto) SetValidationStatus(v CertificateValidationStatus) {
	o.ValidationStatus = v
}

// GetRaProfile returns the RaProfile field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetRaProfile() SimplifiedRaProfileDto {
	if o == nil || IsNil(o.RaProfile) {
		var ret SimplifiedRaProfileDto
		return ret
	}
	return *o.RaProfile
}

// GetRaProfileOk returns a tuple with the RaProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetRaProfileOk() (*SimplifiedRaProfileDto, bool) {
	if o == nil || IsNil(o.RaProfile) {
		return nil, false
	}
	return o.RaProfile, true
}

// HasRaProfile returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasRaProfile() bool {
	if o != nil && !IsNil(o.RaProfile) {
		return true
	}

	return false
}

// SetRaProfile gets a reference to the given SimplifiedRaProfileDto and assigns it to the RaProfile field.
func (o *CertificateDetailDto) SetRaProfile(v SimplifiedRaProfileDto) {
	o.RaProfile = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *CertificateDetailDto) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetGroups() []GroupDto {
	if o == nil || IsNil(o.Groups) {
		var ret []GroupDto
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetGroupsOk() ([]GroupDto, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []GroupDto and assigns it to the Groups field.
func (o *CertificateDetailDto) SetGroups(v []GroupDto) {
	o.Groups = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *CertificateDetailDto) SetOwner(v string) {
	o.Owner = &v
}

// GetOwnerUuid returns the OwnerUuid field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetOwnerUuid() string {
	if o == nil || IsNil(o.OwnerUuid) {
		var ret string
		return ret
	}
	return *o.OwnerUuid
}

// GetOwnerUuidOk returns a tuple with the OwnerUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetOwnerUuidOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerUuid) {
		return nil, false
	}
	return o.OwnerUuid, true
}

// HasOwnerUuid returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasOwnerUuid() bool {
	if o != nil && !IsNil(o.OwnerUuid) {
		return true
	}

	return false
}

// SetOwnerUuid gets a reference to the given string and assigns it to the OwnerUuid field.
func (o *CertificateDetailDto) SetOwnerUuid(v string) {
	o.OwnerUuid = &v
}

// GetCertificateType returns the CertificateType field value
func (o *CertificateDetailDto) GetCertificateType() CertificateType {
	if o == nil {
		var ret CertificateType
		return ret
	}

	return o.CertificateType
}

// GetCertificateTypeOk returns a tuple with the CertificateType field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetCertificateTypeOk() (*CertificateType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateType, true
}

// SetCertificateType sets field value
func (o *CertificateDetailDto) SetCertificateType(v CertificateType) {
	o.CertificateType = v
}

// GetIssuerSerialNumber returns the IssuerSerialNumber field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetIssuerSerialNumber() string {
	if o == nil || IsNil(o.IssuerSerialNumber) {
		var ret string
		return ret
	}
	return *o.IssuerSerialNumber
}

// GetIssuerSerialNumberOk returns a tuple with the IssuerSerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetIssuerSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerSerialNumber) {
		return nil, false
	}
	return o.IssuerSerialNumber, true
}

// HasIssuerSerialNumber returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasIssuerSerialNumber() bool {
	if o != nil && !IsNil(o.IssuerSerialNumber) {
		return true
	}

	return false
}

// SetIssuerSerialNumber gets a reference to the given string and assigns it to the IssuerSerialNumber field.
func (o *CertificateDetailDto) SetIssuerSerialNumber(v string) {
	o.IssuerSerialNumber = &v
}

// GetComplianceStatus returns the ComplianceStatus field value
func (o *CertificateDetailDto) GetComplianceStatus() ComplianceStatus {
	if o == nil {
		var ret ComplianceStatus
		return ret
	}

	return o.ComplianceStatus
}

// GetComplianceStatusOk returns a tuple with the ComplianceStatus field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetComplianceStatusOk() (*ComplianceStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComplianceStatus, true
}

// SetComplianceStatus sets field value
func (o *CertificateDetailDto) SetComplianceStatus(v ComplianceStatus) {
	o.ComplianceStatus = v
}

// GetIssuerCertificateUuid returns the IssuerCertificateUuid field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetIssuerCertificateUuid() string {
	if o == nil || IsNil(o.IssuerCertificateUuid) {
		var ret string
		return ret
	}
	return *o.IssuerCertificateUuid
}

// GetIssuerCertificateUuidOk returns a tuple with the IssuerCertificateUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetIssuerCertificateUuidOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerCertificateUuid) {
		return nil, false
	}
	return o.IssuerCertificateUuid, true
}

// HasIssuerCertificateUuid returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasIssuerCertificateUuid() bool {
	if o != nil && !IsNil(o.IssuerCertificateUuid) {
		return true
	}

	return false
}

// SetIssuerCertificateUuid gets a reference to the given string and assigns it to the IssuerCertificateUuid field.
func (o *CertificateDetailDto) SetIssuerCertificateUuid(v string) {
	o.IssuerCertificateUuid = &v
}

// GetPrivateKeyAvailability returns the PrivateKeyAvailability field value
func (o *CertificateDetailDto) GetPrivateKeyAvailability() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PrivateKeyAvailability
}

// GetPrivateKeyAvailabilityOk returns a tuple with the PrivateKeyAvailability field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetPrivateKeyAvailabilityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKeyAvailability, true
}

// SetPrivateKeyAvailability sets field value
func (o *CertificateDetailDto) SetPrivateKeyAvailability(v bool) {
	o.PrivateKeyAvailability = v
}

// GetTrustedCa returns the TrustedCa field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetTrustedCa() bool {
	if o == nil || IsNil(o.TrustedCa) {
		var ret bool
		return ret
	}
	return *o.TrustedCa
}

// GetTrustedCaOk returns a tuple with the TrustedCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetTrustedCaOk() (*bool, bool) {
	if o == nil || IsNil(o.TrustedCa) {
		return nil, false
	}
	return o.TrustedCa, true
}

// HasTrustedCa returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasTrustedCa() bool {
	if o != nil && !IsNil(o.TrustedCa) {
		return true
	}

	return false
}

// SetTrustedCa gets a reference to the given bool and assigns it to the TrustedCa field.
func (o *CertificateDetailDto) SetTrustedCa(v bool) {
	o.TrustedCa = &v
}

// GetExtendedKeyUsage returns the ExtendedKeyUsage field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetExtendedKeyUsage() []string {
	if o == nil || IsNil(o.ExtendedKeyUsage) {
		var ret []string
		return ret
	}
	return o.ExtendedKeyUsage
}

// GetExtendedKeyUsageOk returns a tuple with the ExtendedKeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetExtendedKeyUsageOk() ([]string, bool) {
	if o == nil || IsNil(o.ExtendedKeyUsage) {
		return nil, false
	}
	return o.ExtendedKeyUsage, true
}

// HasExtendedKeyUsage returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasExtendedKeyUsage() bool {
	if o != nil && !IsNil(o.ExtendedKeyUsage) {
		return true
	}

	return false
}

// SetExtendedKeyUsage gets a reference to the given []string and assigns it to the ExtendedKeyUsage field.
func (o *CertificateDetailDto) SetExtendedKeyUsage(v []string) {
	o.ExtendedKeyUsage = v
}

// GetKeyUsage returns the KeyUsage field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetKeyUsage() []string {
	if o == nil || IsNil(o.KeyUsage) {
		var ret []string
		return ret
	}
	return o.KeyUsage
}

// GetKeyUsageOk returns a tuple with the KeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetKeyUsageOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyUsage) {
		return nil, false
	}
	return o.KeyUsage, true
}

// HasKeyUsage returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasKeyUsage() bool {
	if o != nil && !IsNil(o.KeyUsage) {
		return true
	}

	return false
}

// SetKeyUsage gets a reference to the given []string and assigns it to the KeyUsage field.
func (o *CertificateDetailDto) SetKeyUsage(v []string) {
	o.KeyUsage = v
}

// GetSubjectType returns the SubjectType field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetSubjectType() CertificateSubjectType {
	if o == nil || IsNil(o.SubjectType) {
		var ret CertificateSubjectType
		return ret
	}
	return *o.SubjectType
}

// GetSubjectTypeOk returns a tuple with the SubjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetSubjectTypeOk() (*CertificateSubjectType, bool) {
	if o == nil || IsNil(o.SubjectType) {
		return nil, false
	}
	return o.SubjectType, true
}

// HasSubjectType returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasSubjectType() bool {
	if o != nil && !IsNil(o.SubjectType) {
		return true
	}

	return false
}

// SetSubjectType gets a reference to the given CertificateSubjectType and assigns it to the SubjectType field.
func (o *CertificateDetailDto) SetSubjectType(v CertificateSubjectType) {
	o.SubjectType = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetMetadata() []MetadataResponseDto {
	if o == nil || IsNil(o.Metadata) {
		var ret []MetadataResponseDto
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetMetadataOk() ([]MetadataResponseDto, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []MetadataResponseDto and assigns it to the Metadata field.
func (o *CertificateDetailDto) SetMetadata(v []MetadataResponseDto) {
	o.Metadata = v
}

// GetCertificateContent returns the CertificateContent field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetCertificateContent() string {
	if o == nil || IsNil(o.CertificateContent) {
		var ret string
		return ret
	}
	return *o.CertificateContent
}

// GetCertificateContentOk returns a tuple with the CertificateContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetCertificateContentOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateContent) {
		return nil, false
	}
	return o.CertificateContent, true
}

// HasCertificateContent returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasCertificateContent() bool {
	if o != nil && !IsNil(o.CertificateContent) {
		return true
	}

	return false
}

// SetCertificateContent gets a reference to the given string and assigns it to the CertificateContent field.
func (o *CertificateDetailDto) SetCertificateContent(v string) {
	o.CertificateContent = &v
}

// GetSubjectAlternativeNames returns the SubjectAlternativeNames field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetSubjectAlternativeNames() map[string][]string {
	if o == nil || IsNil(o.SubjectAlternativeNames) {
		var ret map[string][]string
		return ret
	}
	return o.SubjectAlternativeNames
}

// GetSubjectAlternativeNamesOk returns a tuple with the SubjectAlternativeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetSubjectAlternativeNamesOk() (map[string][]string, bool) {
	if o == nil || IsNil(o.SubjectAlternativeNames) {
		return map[string][]string{}, false
	}
	return o.SubjectAlternativeNames, true
}

// HasSubjectAlternativeNames returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasSubjectAlternativeNames() bool {
	if o != nil && !IsNil(o.SubjectAlternativeNames) {
		return true
	}

	return false
}

// SetSubjectAlternativeNames gets a reference to the given map[string][]string and assigns it to the SubjectAlternativeNames field.
func (o *CertificateDetailDto) SetSubjectAlternativeNames(v map[string][]string) {
	o.SubjectAlternativeNames = v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetLocations() []LocationDto {
	if o == nil || IsNil(o.Locations) {
		var ret []LocationDto
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetLocationsOk() ([]LocationDto, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []LocationDto and assigns it to the Locations field.
func (o *CertificateDetailDto) SetLocations(v []LocationDto) {
	o.Locations = v
}

// GetNonCompliantRules returns the NonCompliantRules field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetNonCompliantRules() []CertificateComplianceResultDto {
	if o == nil || IsNil(o.NonCompliantRules) {
		var ret []CertificateComplianceResultDto
		return ret
	}
	return o.NonCompliantRules
}

// GetNonCompliantRulesOk returns a tuple with the NonCompliantRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetNonCompliantRulesOk() ([]CertificateComplianceResultDto, bool) {
	if o == nil || IsNil(o.NonCompliantRules) {
		return nil, false
	}
	return o.NonCompliantRules, true
}

// HasNonCompliantRules returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasNonCompliantRules() bool {
	if o != nil && !IsNil(o.NonCompliantRules) {
		return true
	}

	return false
}

// SetNonCompliantRules gets a reference to the given []CertificateComplianceResultDto and assigns it to the NonCompliantRules field.
func (o *CertificateDetailDto) SetNonCompliantRules(v []CertificateComplianceResultDto) {
	o.NonCompliantRules = v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetCustomAttributes() []ResponseAttributeDto {
	if o == nil || IsNil(o.CustomAttributes) {
		var ret []ResponseAttributeDto
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetCustomAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []ResponseAttributeDto and assigns it to the CustomAttributes field.
func (o *CertificateDetailDto) SetCustomAttributes(v []ResponseAttributeDto) {
	o.CustomAttributes = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetKey() KeyDto {
	if o == nil || IsNil(o.Key) {
		var ret KeyDto
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetKeyOk() (*KeyDto, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given KeyDto and assigns it to the Key field.
func (o *CertificateDetailDto) SetKey(v KeyDto) {
	o.Key = &v
}

// GetCertificateRequest returns the CertificateRequest field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetCertificateRequest() CertificateRequestDto {
	if o == nil || IsNil(o.CertificateRequest) {
		var ret CertificateRequestDto
		return ret
	}
	return *o.CertificateRequest
}

// GetCertificateRequestOk returns a tuple with the CertificateRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetCertificateRequestOk() (*CertificateRequestDto, bool) {
	if o == nil || IsNil(o.CertificateRequest) {
		return nil, false
	}
	return o.CertificateRequest, true
}

// HasCertificateRequest returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasCertificateRequest() bool {
	if o != nil && !IsNil(o.CertificateRequest) {
		return true
	}

	return false
}

// SetCertificateRequest gets a reference to the given CertificateRequestDto and assigns it to the CertificateRequest field.
func (o *CertificateDetailDto) SetCertificateRequest(v CertificateRequestDto) {
	o.CertificateRequest = &v
}

// GetSourceCertificateUuid returns the SourceCertificateUuid field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetSourceCertificateUuid() string {
	if o == nil || IsNil(o.SourceCertificateUuid) {
		var ret string
		return ret
	}
	return *o.SourceCertificateUuid
}

// GetSourceCertificateUuidOk returns a tuple with the SourceCertificateUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetSourceCertificateUuidOk() (*string, bool) {
	if o == nil || IsNil(o.SourceCertificateUuid) {
		return nil, false
	}
	return o.SourceCertificateUuid, true
}

// HasSourceCertificateUuid returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasSourceCertificateUuid() bool {
	if o != nil && !IsNil(o.SourceCertificateUuid) {
		return true
	}

	return false
}

// SetSourceCertificateUuid gets a reference to the given string and assigns it to the SourceCertificateUuid field.
func (o *CertificateDetailDto) SetSourceCertificateUuid(v string) {
	o.SourceCertificateUuid = &v
}

// GetIssueAttributes returns the IssueAttributes field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetIssueAttributes() []ResponseAttributeDto {
	if o == nil || IsNil(o.IssueAttributes) {
		var ret []ResponseAttributeDto
		return ret
	}
	return o.IssueAttributes
}

// GetIssueAttributesOk returns a tuple with the IssueAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetIssueAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil || IsNil(o.IssueAttributes) {
		return nil, false
	}
	return o.IssueAttributes, true
}

// HasIssueAttributes returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasIssueAttributes() bool {
	if o != nil && !IsNil(o.IssueAttributes) {
		return true
	}

	return false
}

// SetIssueAttributes gets a reference to the given []ResponseAttributeDto and assigns it to the IssueAttributes field.
func (o *CertificateDetailDto) SetIssueAttributes(v []ResponseAttributeDto) {
	o.IssueAttributes = v
}

// GetRevokeAttributes returns the RevokeAttributes field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetRevokeAttributes() []ResponseAttributeDto {
	if o == nil || IsNil(o.RevokeAttributes) {
		var ret []ResponseAttributeDto
		return ret
	}
	return o.RevokeAttributes
}

// GetRevokeAttributesOk returns a tuple with the RevokeAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetRevokeAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil || IsNil(o.RevokeAttributes) {
		return nil, false
	}
	return o.RevokeAttributes, true
}

// HasRevokeAttributes returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasRevokeAttributes() bool {
	if o != nil && !IsNil(o.RevokeAttributes) {
		return true
	}

	return false
}

// SetRevokeAttributes gets a reference to the given []ResponseAttributeDto and assigns it to the RevokeAttributes field.
func (o *CertificateDetailDto) SetRevokeAttributes(v []ResponseAttributeDto) {
	o.RevokeAttributes = v
}

// GetRelatedCertificates returns the RelatedCertificates field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetRelatedCertificates() []CertificateDto {
	if o == nil || IsNil(o.RelatedCertificates) {
		var ret []CertificateDto
		return ret
	}
	return o.RelatedCertificates
}

// GetRelatedCertificatesOk returns a tuple with the RelatedCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetRelatedCertificatesOk() ([]CertificateDto, bool) {
	if o == nil || IsNil(o.RelatedCertificates) {
		return nil, false
	}
	return o.RelatedCertificates, true
}

// HasRelatedCertificates returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasRelatedCertificates() bool {
	if o != nil && !IsNil(o.RelatedCertificates) {
		return true
	}

	return false
}

// SetRelatedCertificates gets a reference to the given []CertificateDto and assigns it to the RelatedCertificates field.
func (o *CertificateDetailDto) SetRelatedCertificates(v []CertificateDto) {
	o.RelatedCertificates = v
}

// GetProtocolInfo returns the ProtocolInfo field value if set, zero value otherwise.
func (o *CertificateDetailDto) GetProtocolInfo() CertificateProtocolDto {
	if o == nil || IsNil(o.ProtocolInfo) {
		var ret CertificateProtocolDto
		return ret
	}
	return *o.ProtocolInfo
}

// GetProtocolInfoOk returns a tuple with the ProtocolInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetProtocolInfoOk() (*CertificateProtocolDto, bool) {
	if o == nil || IsNil(o.ProtocolInfo) {
		return nil, false
	}
	return o.ProtocolInfo, true
}

// HasProtocolInfo returns a boolean if a field has been set.
func (o *CertificateDetailDto) HasProtocolInfo() bool {
	if o != nil && !IsNil(o.ProtocolInfo) {
		return true
	}

	return false
}

// SetProtocolInfo gets a reference to the given CertificateProtocolDto and assigns it to the ProtocolInfo field.
func (o *CertificateDetailDto) SetProtocolInfo(v CertificateProtocolDto) {
	o.ProtocolInfo = &v
}

func (o CertificateDetailDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateDetailDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["commonName"] = o.CommonName
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.IssuerCommonName) {
		toSerialize["issuerCommonName"] = o.IssuerCommonName
	}
	if !IsNil(o.IssuerDn) {
		toSerialize["issuerDn"] = o.IssuerDn
	}
	toSerialize["subjectDn"] = o.SubjectDn
	if !IsNil(o.NotBefore) {
		toSerialize["notBefore"] = o.NotBefore
	}
	if !IsNil(o.NotAfter) {
		toSerialize["notAfter"] = o.NotAfter
	}
	toSerialize["publicKeyAlgorithm"] = o.PublicKeyAlgorithm
	toSerialize["signatureAlgorithm"] = o.SignatureAlgorithm
	toSerialize["keySize"] = o.KeySize
	toSerialize["state"] = o.State
	toSerialize["validationStatus"] = o.ValidationStatus
	if !IsNil(o.RaProfile) {
		toSerialize["raProfile"] = o.RaProfile
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.OwnerUuid) {
		toSerialize["ownerUuid"] = o.OwnerUuid
	}
	toSerialize["certificateType"] = o.CertificateType
	if !IsNil(o.IssuerSerialNumber) {
		toSerialize["issuerSerialNumber"] = o.IssuerSerialNumber
	}
	toSerialize["complianceStatus"] = o.ComplianceStatus
	if !IsNil(o.IssuerCertificateUuid) {
		toSerialize["issuerCertificateUuid"] = o.IssuerCertificateUuid
	}
	toSerialize["privateKeyAvailability"] = o.PrivateKeyAvailability
	if !IsNil(o.TrustedCa) {
		toSerialize["trustedCa"] = o.TrustedCa
	}
	if !IsNil(o.ExtendedKeyUsage) {
		toSerialize["extendedKeyUsage"] = o.ExtendedKeyUsage
	}
	if !IsNil(o.KeyUsage) {
		toSerialize["keyUsage"] = o.KeyUsage
	}
	if !IsNil(o.SubjectType) {
		toSerialize["subjectType"] = o.SubjectType
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.CertificateContent) {
		toSerialize["certificateContent"] = o.CertificateContent
	}
	if !IsNil(o.SubjectAlternativeNames) {
		toSerialize["subjectAlternativeNames"] = o.SubjectAlternativeNames
	}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}
	if !IsNil(o.NonCompliantRules) {
		toSerialize["nonCompliantRules"] = o.NonCompliantRules
	}
	if !IsNil(o.CustomAttributes) {
		toSerialize["customAttributes"] = o.CustomAttributes
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.CertificateRequest) {
		toSerialize["certificateRequest"] = o.CertificateRequest
	}
	if !IsNil(o.SourceCertificateUuid) {
		toSerialize["sourceCertificateUuid"] = o.SourceCertificateUuid
	}
	if !IsNil(o.IssueAttributes) {
		toSerialize["issueAttributes"] = o.IssueAttributes
	}
	if !IsNil(o.RevokeAttributes) {
		toSerialize["revokeAttributes"] = o.RevokeAttributes
	}
	if !IsNil(o.RelatedCertificates) {
		toSerialize["relatedCertificates"] = o.RelatedCertificates
	}
	if !IsNil(o.ProtocolInfo) {
		toSerialize["protocolInfo"] = o.ProtocolInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateDetailDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"commonName",
		"subjectDn",
		"publicKeyAlgorithm",
		"signatureAlgorithm",
		"keySize",
		"state",
		"validationStatus",
		"certificateType",
		"complianceStatus",
		"privateKeyAvailability",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateDetailDto := _CertificateDetailDto{}

	err = json.Unmarshal(data, &varCertificateDetailDto)

	if err != nil {
		return err
	}

	*o = CertificateDetailDto(varCertificateDetailDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "commonName")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "issuerCommonName")
		delete(additionalProperties, "issuerDn")
		delete(additionalProperties, "subjectDn")
		delete(additionalProperties, "notBefore")
		delete(additionalProperties, "notAfter")
		delete(additionalProperties, "publicKeyAlgorithm")
		delete(additionalProperties, "signatureAlgorithm")
		delete(additionalProperties, "keySize")
		delete(additionalProperties, "state")
		delete(additionalProperties, "validationStatus")
		delete(additionalProperties, "raProfile")
		delete(additionalProperties, "fingerprint")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "ownerUuid")
		delete(additionalProperties, "certificateType")
		delete(additionalProperties, "issuerSerialNumber")
		delete(additionalProperties, "complianceStatus")
		delete(additionalProperties, "issuerCertificateUuid")
		delete(additionalProperties, "privateKeyAvailability")
		delete(additionalProperties, "trustedCa")
		delete(additionalProperties, "extendedKeyUsage")
		delete(additionalProperties, "keyUsage")
		delete(additionalProperties, "subjectType")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "certificateContent")
		delete(additionalProperties, "subjectAlternativeNames")
		delete(additionalProperties, "locations")
		delete(additionalProperties, "nonCompliantRules")
		delete(additionalProperties, "customAttributes")
		delete(additionalProperties, "key")
		delete(additionalProperties, "certificateRequest")
		delete(additionalProperties, "sourceCertificateUuid")
		delete(additionalProperties, "issueAttributes")
		delete(additionalProperties, "revokeAttributes")
		delete(additionalProperties, "relatedCertificates")
		delete(additionalProperties, "protocolInfo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateDetailDto struct {
	value *CertificateDetailDto
	isSet bool
}

func (v NullableCertificateDetailDto) Get() *CertificateDetailDto {
	return v.value
}

func (v *NullableCertificateDetailDto) Set(val *CertificateDetailDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateDetailDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateDetailDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateDetailDto(val *CertificateDetailDto) *NullableCertificateDetailDto {
	return &NullableCertificateDetailDto{value: val, isSet: true}
}

func (v NullableCertificateDetailDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateDetailDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


