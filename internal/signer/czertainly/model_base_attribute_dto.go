/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// BaseAttributeDto - Base Attribute definition
type BaseAttributeDto struct {
	CustomAttribute *CustomAttribute
	DataAttribute *DataAttribute
	GroupAttribute *GroupAttribute
	InfoAttribute *InfoAttribute
	MetadataAttribute *MetadataAttribute
}

// CustomAttributeAsBaseAttributeDto is a convenience function that returns CustomAttribute wrapped in BaseAttributeDto
func CustomAttributeAsBaseAttributeDto(v *CustomAttribute) BaseAttributeDto {
	return BaseAttributeDto{
		CustomAttribute: v,
	}
}

// DataAttributeAsBaseAttributeDto is a convenience function that returns DataAttribute wrapped in BaseAttributeDto
func DataAttributeAsBaseAttributeDto(v *DataAttribute) BaseAttributeDto {
	return BaseAttributeDto{
		DataAttribute: v,
	}
}

// GroupAttributeAsBaseAttributeDto is a convenience function that returns GroupAttribute wrapped in BaseAttributeDto
func GroupAttributeAsBaseAttributeDto(v *GroupAttribute) BaseAttributeDto {
	return BaseAttributeDto{
		GroupAttribute: v,
	}
}

// InfoAttributeAsBaseAttributeDto is a convenience function that returns InfoAttribute wrapped in BaseAttributeDto
func InfoAttributeAsBaseAttributeDto(v *InfoAttribute) BaseAttributeDto {
	return BaseAttributeDto{
		InfoAttribute: v,
	}
}

// MetadataAttributeAsBaseAttributeDto is a convenience function that returns MetadataAttribute wrapped in BaseAttributeDto
func MetadataAttributeAsBaseAttributeDto(v *MetadataAttribute) BaseAttributeDto {
	return BaseAttributeDto{
		MetadataAttribute: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BaseAttributeDto) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CustomAttribute
	err = newStrictDecoder(data).Decode(&dst.CustomAttribute)
	if err == nil {
		jsonCustomAttribute, _ := json.Marshal(dst.CustomAttribute)
		if string(jsonCustomAttribute) == "{}" { // empty struct
			dst.CustomAttribute = nil
		} else {
			if err = validator.Validate(dst.CustomAttribute); err != nil {
				dst.CustomAttribute = nil
			} else {
				match++
			}
		}
	} else {
		dst.CustomAttribute = nil
	}

	// try to unmarshal data into DataAttribute
	err = newStrictDecoder(data).Decode(&dst.DataAttribute)
	if err == nil {
		jsonDataAttribute, _ := json.Marshal(dst.DataAttribute)
		if string(jsonDataAttribute) == "{}" { // empty struct
			dst.DataAttribute = nil
		} else {
			if err = validator.Validate(dst.DataAttribute); err != nil {
				dst.DataAttribute = nil
			} else {
				match++
			}
		}
	} else {
		dst.DataAttribute = nil
	}

	// try to unmarshal data into GroupAttribute
	err = newStrictDecoder(data).Decode(&dst.GroupAttribute)
	if err == nil {
		jsonGroupAttribute, _ := json.Marshal(dst.GroupAttribute)
		if string(jsonGroupAttribute) == "{}" { // empty struct
			dst.GroupAttribute = nil
		} else {
			if err = validator.Validate(dst.GroupAttribute); err != nil {
				dst.GroupAttribute = nil
			} else {
				match++
			}
		}
	} else {
		dst.GroupAttribute = nil
	}

	// try to unmarshal data into InfoAttribute
	err = newStrictDecoder(data).Decode(&dst.InfoAttribute)
	if err == nil {
		jsonInfoAttribute, _ := json.Marshal(dst.InfoAttribute)
		if string(jsonInfoAttribute) == "{}" { // empty struct
			dst.InfoAttribute = nil
		} else {
			if err = validator.Validate(dst.InfoAttribute); err != nil {
				dst.InfoAttribute = nil
			} else {
				match++
			}
		}
	} else {
		dst.InfoAttribute = nil
	}

	// try to unmarshal data into MetadataAttribute
	err = newStrictDecoder(data).Decode(&dst.MetadataAttribute)
	if err == nil {
		jsonMetadataAttribute, _ := json.Marshal(dst.MetadataAttribute)
		if string(jsonMetadataAttribute) == "{}" { // empty struct
			dst.MetadataAttribute = nil
		} else {
			if err = validator.Validate(dst.MetadataAttribute); err != nil {
				dst.MetadataAttribute = nil
			} else {
				match++
			}
		}
	} else {
		dst.MetadataAttribute = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CustomAttribute = nil
		dst.DataAttribute = nil
		dst.GroupAttribute = nil
		dst.InfoAttribute = nil
		dst.MetadataAttribute = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BaseAttributeDto)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BaseAttributeDto)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BaseAttributeDto) MarshalJSON() ([]byte, error) {
	if src.CustomAttribute != nil {
		return json.Marshal(&src.CustomAttribute)
	}

	if src.DataAttribute != nil {
		return json.Marshal(&src.DataAttribute)
	}

	if src.GroupAttribute != nil {
		return json.Marshal(&src.GroupAttribute)
	}

	if src.InfoAttribute != nil {
		return json.Marshal(&src.InfoAttribute)
	}

	if src.MetadataAttribute != nil {
		return json.Marshal(&src.MetadataAttribute)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BaseAttributeDto) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CustomAttribute != nil {
		return obj.CustomAttribute
	}

	if obj.DataAttribute != nil {
		return obj.DataAttribute
	}

	if obj.GroupAttribute != nil {
		return obj.GroupAttribute
	}

	if obj.InfoAttribute != nil {
		return obj.InfoAttribute
	}

	if obj.MetadataAttribute != nil {
		return obj.MetadataAttribute
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj BaseAttributeDto) GetActualInstanceValue() (interface{}) {
	if obj.CustomAttribute != nil {
		return *obj.CustomAttribute
	}

	if obj.DataAttribute != nil {
		return *obj.DataAttribute
	}

	if obj.GroupAttribute != nil {
		return *obj.GroupAttribute
	}

	if obj.InfoAttribute != nil {
		return *obj.InfoAttribute
	}

	if obj.MetadataAttribute != nil {
		return *obj.MetadataAttribute
	}

	// all schemas are nil
	return nil
}

type NullableBaseAttributeDto struct {
	value *BaseAttributeDto
	isSet bool
}

func (v NullableBaseAttributeDto) Get() *BaseAttributeDto {
	return v.value
}

func (v *NullableBaseAttributeDto) Set(val *BaseAttributeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseAttributeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseAttributeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseAttributeDto(val *BaseAttributeDto) *NullableBaseAttributeDto {
	return &NullableBaseAttributeDto{value: val, isSet: true}
}

func (v NullableBaseAttributeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseAttributeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


