/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the DatabaseInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseInfoDto{}

// DatabaseInfoDto struct for DatabaseInfoDto
type DatabaseInfoDto struct {
	// Database system product name
	System string `json:"system"`
	// Database product version
	Version string `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _DatabaseInfoDto DatabaseInfoDto

// NewDatabaseInfoDto instantiates a new DatabaseInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseInfoDto(system string, version string) *DatabaseInfoDto {
	this := DatabaseInfoDto{}
	this.System = system
	this.Version = version
	return &this
}

// NewDatabaseInfoDtoWithDefaults instantiates a new DatabaseInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseInfoDtoWithDefaults() *DatabaseInfoDto {
	this := DatabaseInfoDto{}
	return &this
}

// GetSystem returns the System field value
func (o *DatabaseInfoDto) GetSystem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.System
}

// GetSystemOk returns a tuple with the System field value
// and a boolean to check if the value has been set.
func (o *DatabaseInfoDto) GetSystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.System, true
}

// SetSystem sets field value
func (o *DatabaseInfoDto) SetSystem(v string) {
	o.System = v
}

// GetVersion returns the Version field value
func (o *DatabaseInfoDto) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DatabaseInfoDto) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DatabaseInfoDto) SetVersion(v string) {
	o.Version = v
}

func (o DatabaseInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["system"] = o.System
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatabaseInfoDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"system",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatabaseInfoDto := _DatabaseInfoDto{}

	err = json.Unmarshal(data, &varDatabaseInfoDto)

	if err != nil {
		return err
	}

	*o = DatabaseInfoDto(varDatabaseInfoDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "system")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatabaseInfoDto struct {
	value *DatabaseInfoDto
	isSet bool
}

func (v NullableDatabaseInfoDto) Get() *DatabaseInfoDto {
	return v.value
}

func (v *NullableDatabaseInfoDto) Set(val *DatabaseInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseInfoDto(val *DatabaseInfoDto) *NullableDatabaseInfoDto {
	return &NullableDatabaseInfoDto{value: val, isSet: true}
}

func (v NullableDatabaseInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


