/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.1
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the DataAttributeProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataAttributeProperties{}

// DataAttributeProperties Properties of the Attributes
type DataAttributeProperties struct {
	// Friendly name of the the Attribute
	Label string `json:"label"`
	// Boolean determining if the Attribute is visible and can be displayed, otherwise it should be hidden to the user.
	Visible bool `json:"visible"`
	// Group of the Attribute, used for the logical grouping of the Attribute
	Group *string `json:"group,omitempty"`
	// Boolean determining if the Attribute is required. If true, the Attribute must be provided.
	Required bool `json:"required"`
	// Boolean determining if the Attribute is read only. If true, the Attribute content cannot be changed.
	ReadOnly bool `json:"readOnly"`
	// Boolean determining if the Attribute contains list of values in the content
	List bool `json:"list"`
	// Boolean determining if the Attribute can have multiple values
	MultiSelect bool `json:"multiSelect"`
	AdditionalProperties map[string]interface{}
}

type _DataAttributeProperties DataAttributeProperties

// NewDataAttributeProperties instantiates a new DataAttributeProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataAttributeProperties(label string, visible bool, required bool, readOnly bool, list bool, multiSelect bool) *DataAttributeProperties {
	this := DataAttributeProperties{}
	this.Label = label
	this.Visible = visible
	this.Required = required
	this.ReadOnly = readOnly
	this.List = list
	this.MultiSelect = multiSelect
	return &this
}

// NewDataAttributePropertiesWithDefaults instantiates a new DataAttributeProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataAttributePropertiesWithDefaults() *DataAttributeProperties {
	this := DataAttributeProperties{}
	var visible bool = true
	this.Visible = visible
	var required bool = false
	this.Required = required
	var readOnly bool = false
	this.ReadOnly = readOnly
	var list bool = false
	this.List = list
	var multiSelect bool = false
	this.MultiSelect = multiSelect
	return &this
}

// GetLabel returns the Label field value
func (o *DataAttributeProperties) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *DataAttributeProperties) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *DataAttributeProperties) SetLabel(v string) {
	o.Label = v
}

// GetVisible returns the Visible field value
func (o *DataAttributeProperties) GetVisible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value
// and a boolean to check if the value has been set.
func (o *DataAttributeProperties) GetVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visible, true
}

// SetVisible sets field value
func (o *DataAttributeProperties) SetVisible(v bool) {
	o.Visible = v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *DataAttributeProperties) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAttributeProperties) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *DataAttributeProperties) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *DataAttributeProperties) SetGroup(v string) {
	o.Group = &v
}

// GetRequired returns the Required field value
func (o *DataAttributeProperties) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *DataAttributeProperties) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *DataAttributeProperties) SetRequired(v bool) {
	o.Required = v
}

// GetReadOnly returns the ReadOnly field value
func (o *DataAttributeProperties) GetReadOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value
// and a boolean to check if the value has been set.
func (o *DataAttributeProperties) GetReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadOnly, true
}

// SetReadOnly sets field value
func (o *DataAttributeProperties) SetReadOnly(v bool) {
	o.ReadOnly = v
}

// GetList returns the List field value
func (o *DataAttributeProperties) GetList() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.List
}

// GetListOk returns a tuple with the List field value
// and a boolean to check if the value has been set.
func (o *DataAttributeProperties) GetListOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.List, true
}

// SetList sets field value
func (o *DataAttributeProperties) SetList(v bool) {
	o.List = v
}

// GetMultiSelect returns the MultiSelect field value
func (o *DataAttributeProperties) GetMultiSelect() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MultiSelect
}

// GetMultiSelectOk returns a tuple with the MultiSelect field value
// and a boolean to check if the value has been set.
func (o *DataAttributeProperties) GetMultiSelectOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MultiSelect, true
}

// SetMultiSelect sets field value
func (o *DataAttributeProperties) SetMultiSelect(v bool) {
	o.MultiSelect = v
}

func (o DataAttributeProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataAttributeProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["visible"] = o.Visible
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	toSerialize["required"] = o.Required
	toSerialize["readOnly"] = o.ReadOnly
	toSerialize["list"] = o.List
	toSerialize["multiSelect"] = o.MultiSelect

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DataAttributeProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"visible",
		"required",
		"readOnly",
		"list",
		"multiSelect",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataAttributeProperties := _DataAttributeProperties{}

	err = json.Unmarshal(data, &varDataAttributeProperties)

	if err != nil {
		return err
	}

	*o = DataAttributeProperties(varDataAttributeProperties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "visible")
		delete(additionalProperties, "group")
		delete(additionalProperties, "required")
		delete(additionalProperties, "readOnly")
		delete(additionalProperties, "list")
		delete(additionalProperties, "multiSelect")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDataAttributeProperties struct {
	value *DataAttributeProperties
	isSet bool
}

func (v NullableDataAttributeProperties) Get() *DataAttributeProperties {
	return v.value
}

func (v *NullableDataAttributeProperties) Set(val *DataAttributeProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableDataAttributeProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableDataAttributeProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataAttributeProperties(val *DataAttributeProperties) *NullableDataAttributeProperties {
	return &NullableDataAttributeProperties{value: val, isSet: true}
}

func (v NullableDataAttributeProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataAttributeProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


