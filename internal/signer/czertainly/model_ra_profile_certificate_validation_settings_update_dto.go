/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.14.2-SNAPSHOT
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
)

// checks if the RaProfileCertificateValidationSettingsUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RaProfileCertificateValidationSettingsUpdateDto{}

// RaProfileCertificateValidationSettingsUpdateDto struct for RaProfileCertificateValidationSettingsUpdateDto
type RaProfileCertificateValidationSettingsUpdateDto struct {
	// Indicator whether validation of certificates associated with RA profile should be enabled, if null, then values in platform settings will be used
	Enabled *bool `json:"enabled,omitempty"`
	// Frequency of validation of certificates in days, when not set, value in platform settings is used
	Frequency *int32 `json:"frequency,omitempty"`
	// How many days before expiration should certificate validation status change to Expiring, when not set, value in platform settings is used
	ExpiringThreshold *int32 `json:"expiringThreshold,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RaProfileCertificateValidationSettingsUpdateDto RaProfileCertificateValidationSettingsUpdateDto

// NewRaProfileCertificateValidationSettingsUpdateDto instantiates a new RaProfileCertificateValidationSettingsUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRaProfileCertificateValidationSettingsUpdateDto() *RaProfileCertificateValidationSettingsUpdateDto {
	this := RaProfileCertificateValidationSettingsUpdateDto{}
	var frequency int32 = 1
	this.Frequency = &frequency
	var expiringThreshold int32 = 30
	this.ExpiringThreshold = &expiringThreshold
	return &this
}

// NewRaProfileCertificateValidationSettingsUpdateDtoWithDefaults instantiates a new RaProfileCertificateValidationSettingsUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRaProfileCertificateValidationSettingsUpdateDtoWithDefaults() *RaProfileCertificateValidationSettingsUpdateDto {
	this := RaProfileCertificateValidationSettingsUpdateDto{}
	var frequency int32 = 1
	this.Frequency = &frequency
	var expiringThreshold int32 = 30
	this.ExpiringThreshold = &expiringThreshold
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RaProfileCertificateValidationSettingsUpdateDto) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RaProfileCertificateValidationSettingsUpdateDto) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RaProfileCertificateValidationSettingsUpdateDto) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RaProfileCertificateValidationSettingsUpdateDto) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *RaProfileCertificateValidationSettingsUpdateDto) GetFrequency() int32 {
	if o == nil || IsNil(o.Frequency) {
		var ret int32
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RaProfileCertificateValidationSettingsUpdateDto) GetFrequencyOk() (*int32, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *RaProfileCertificateValidationSettingsUpdateDto) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given int32 and assigns it to the Frequency field.
func (o *RaProfileCertificateValidationSettingsUpdateDto) SetFrequency(v int32) {
	o.Frequency = &v
}

// GetExpiringThreshold returns the ExpiringThreshold field value if set, zero value otherwise.
func (o *RaProfileCertificateValidationSettingsUpdateDto) GetExpiringThreshold() int32 {
	if o == nil || IsNil(o.ExpiringThreshold) {
		var ret int32
		return ret
	}
	return *o.ExpiringThreshold
}

// GetExpiringThresholdOk returns a tuple with the ExpiringThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RaProfileCertificateValidationSettingsUpdateDto) GetExpiringThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiringThreshold) {
		return nil, false
	}
	return o.ExpiringThreshold, true
}

// HasExpiringThreshold returns a boolean if a field has been set.
func (o *RaProfileCertificateValidationSettingsUpdateDto) HasExpiringThreshold() bool {
	if o != nil && !IsNil(o.ExpiringThreshold) {
		return true
	}

	return false
}

// SetExpiringThreshold gets a reference to the given int32 and assigns it to the ExpiringThreshold field.
func (o *RaProfileCertificateValidationSettingsUpdateDto) SetExpiringThreshold(v int32) {
	o.ExpiringThreshold = &v
}

func (o RaProfileCertificateValidationSettingsUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RaProfileCertificateValidationSettingsUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.ExpiringThreshold) {
		toSerialize["expiringThreshold"] = o.ExpiringThreshold
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RaProfileCertificateValidationSettingsUpdateDto) UnmarshalJSON(data []byte) (err error) {
	varRaProfileCertificateValidationSettingsUpdateDto := _RaProfileCertificateValidationSettingsUpdateDto{}

	err = json.Unmarshal(data, &varRaProfileCertificateValidationSettingsUpdateDto)

	if err != nil {
		return err
	}

	*o = RaProfileCertificateValidationSettingsUpdateDto(varRaProfileCertificateValidationSettingsUpdateDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "frequency")
		delete(additionalProperties, "expiringThreshold")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRaProfileCertificateValidationSettingsUpdateDto struct {
	value *RaProfileCertificateValidationSettingsUpdateDto
	isSet bool
}

func (v NullableRaProfileCertificateValidationSettingsUpdateDto) Get() *RaProfileCertificateValidationSettingsUpdateDto {
	return v.value
}

func (v *NullableRaProfileCertificateValidationSettingsUpdateDto) Set(val *RaProfileCertificateValidationSettingsUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRaProfileCertificateValidationSettingsUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRaProfileCertificateValidationSettingsUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRaProfileCertificateValidationSettingsUpdateDto(val *RaProfileCertificateValidationSettingsUpdateDto) *NullableRaProfileCertificateValidationSettingsUpdateDto {
	return &NullableRaProfileCertificateValidationSettingsUpdateDto{value: val, isSet: true}
}

func (v NullableRaProfileCertificateValidationSettingsUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRaProfileCertificateValidationSettingsUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


