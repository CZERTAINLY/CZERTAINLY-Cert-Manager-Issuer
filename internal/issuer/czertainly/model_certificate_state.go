/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.0
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// CertificateState State of the Certificate
type CertificateState string

// List of CertificateState
const (
	CERTIFICATESTATE_REQUESTED CertificateState = "requested"
	CERTIFICATESTATE_REJECTED CertificateState = "rejected"
	CERTIFICATESTATE_PENDING_APPROVAL CertificateState = "pending_approval"
	CERTIFICATESTATE_PENDING_ISSUE CertificateState = "pending_issue"
	CERTIFICATESTATE_PENDING_REVOKE CertificateState = "pending_revoke"
	CERTIFICATESTATE_FAILED CertificateState = "failed"
	CERTIFICATESTATE_ISSUED CertificateState = "issued"
	CERTIFICATESTATE_REVOKED CertificateState = "revoked"
	CERTIFICATESTATE_ARCHIVED CertificateState = "archived"
)

// All allowed values of CertificateState enum
var AllowedCertificateStateEnumValues = []CertificateState{
	"requested",
	"rejected",
	"pending_approval",
	"pending_issue",
	"pending_revoke",
	"failed",
	"issued",
	"revoked",
	"archived",
}

func (v *CertificateState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CertificateState(value)
	for _, existing := range AllowedCertificateStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CertificateState", value)
}

// NewCertificateStateFromValue returns a pointer to a valid CertificateState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCertificateStateFromValue(v string) (*CertificateState, error) {
	ev := CertificateState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CertificateState: valid values are %v", v, AllowedCertificateStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CertificateState) IsValid() bool {
	for _, existing := range AllowedCertificateStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CertificateState value
func (v CertificateState) Ptr() *CertificateState {
	return &v
}

type NullableCertificateState struct {
	value *CertificateState
	isSet bool
}

func (v NullableCertificateState) Get() *CertificateState {
	return v.value
}

func (v *NullableCertificateState) Set(val *CertificateState) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateState) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateState(val *CertificateState) *NullableCertificateState {
	return &NullableCertificateState{value: val, isSet: true}
}

func (v NullableCertificateState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

