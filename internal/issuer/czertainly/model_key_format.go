/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.0
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// KeyFormat Key Format
type KeyFormat string

// List of KeyFormat
const (
	KEYFORMAT_RAW KeyFormat = "Raw"
	KEYFORMAT_SUBJECT_PUBLIC_KEY_INFO KeyFormat = "SubjectPublicKeyInfo"
	KEYFORMAT_PRIVATE_KEY_INFO KeyFormat = "PrivateKeyInfo"
	KEYFORMAT_ENCRYPTED_PRIVATE_KEY_INFO KeyFormat = "EncryptedPrivateKeyInfo"
	KEYFORMAT_CUSTOM KeyFormat = "Custom"
)

// All allowed values of KeyFormat enum
var AllowedKeyFormatEnumValues = []KeyFormat{
	"Raw",
	"SubjectPublicKeyInfo",
	"PrivateKeyInfo",
	"EncryptedPrivateKeyInfo",
	"Custom",
}

func (v *KeyFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyFormat(value)
	for _, existing := range AllowedKeyFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyFormat", value)
}

// NewKeyFormatFromValue returns a pointer to a valid KeyFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyFormatFromValue(v string) (*KeyFormat, error) {
	ev := KeyFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyFormat: valid values are %v", v, AllowedKeyFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyFormat) IsValid() bool {
	for _, existing := range AllowedKeyFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyFormat value
func (v KeyFormat) Ptr() *KeyFormat {
	return &v
}

type NullableKeyFormat struct {
	value *KeyFormat
	isSet bool
}

func (v NullableKeyFormat) Get() *KeyFormat {
	return v.value
}

func (v *NullableKeyFormat) Set(val *KeyFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyFormat(val *KeyFormat) *NullableKeyFormat {
	return &NullableKeyFormat{value: val, isSet: true}
}

func (v NullableKeyFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

