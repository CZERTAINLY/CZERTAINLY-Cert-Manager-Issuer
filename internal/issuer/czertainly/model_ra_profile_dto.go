/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.1-SNAPSHOT
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the RaProfileDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RaProfileDto{}

// RaProfileDto struct for RaProfileDto
type RaProfileDto struct {
	// UUID of Authority provider
	AuthorityInstanceUuid string `json:"authorityInstanceUuid"`
	AdditionalProperties map[string]interface{}
}

type _RaProfileDto RaProfileDto

// NewRaProfileDto instantiates a new RaProfileDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRaProfileDto(uuid string, name string, authorityInstanceUuid string, authorityInstanceName string, enabled bool) *RaProfileDto {
	this := RaProfileDto{}
	this.AuthorityInstanceUuid = authorityInstanceUuid
	return &this
}

// NewRaProfileDtoWithDefaults instantiates a new RaProfileDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRaProfileDtoWithDefaults() *RaProfileDto {
	this := RaProfileDto{}
	return &this
}

// GetAuthorityInstanceUuid returns the AuthorityInstanceUuid field value
func (o *RaProfileDto) GetAuthorityInstanceUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorityInstanceUuid
}

// GetAuthorityInstanceUuidOk returns a tuple with the AuthorityInstanceUuid field value
// and a boolean to check if the value has been set.
func (o *RaProfileDto) GetAuthorityInstanceUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorityInstanceUuid, true
}

// SetAuthorityInstanceUuid sets field value
func (o *RaProfileDto) SetAuthorityInstanceUuid(v string) {
	o.AuthorityInstanceUuid = v
}

func (o RaProfileDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RaProfileDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authorityInstanceUuid"] = o.AuthorityInstanceUuid

	return toSerialize, nil
}

func (o *RaProfileDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authorityInstanceUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRaProfileDto := _RaProfileDto{}

	err = json.Unmarshal(data, &varRaProfileDto)

	if err != nil {
		return err
	}

	*o = RaProfileDto(varRaProfileDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authorityInstanceUuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRaProfileDto struct {
	value *RaProfileDto
	isSet bool
}

func (v NullableRaProfileDto) Get() *RaProfileDto {
	return v.value
}

func (v *NullableRaProfileDto) Set(val *RaProfileDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRaProfileDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRaProfileDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRaProfileDto(val *RaProfileDto) *NullableRaProfileDto {
	return &NullableRaProfileDto{value: val, isSet: true}
}

func (v NullableRaProfileDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRaProfileDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


