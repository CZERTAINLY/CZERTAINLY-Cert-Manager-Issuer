/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.0
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the CertificateRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateRequestDto{}

// CertificateRequestDto Certificate request data
type CertificateRequestDto struct {
	CertificateType *CertificateType `json:"certificateType,omitempty"`
	CertificateRequestFormat *CertificateRequestFormat `json:"certificateRequestFormat,omitempty"`
	// Public key algorithm
	PublicKeyAlgorithm string `json:"publicKeyAlgorithm"`
	// Certificate signature algorithm
	SignatureAlgorithm string `json:"signatureAlgorithm"`
	// Certificate request content
	Content string `json:"content"`
	// Certificate common name
	CommonName string `json:"commonName"`
	// Subject DN of the Certificate
	SubjectDn string `json:"subjectDn"`
	// Subject alternative names
	SubjectAlternativeNames map[string][]string `json:"subjectAlternativeNames,omitempty"`
	// CSR Attributes
	Attributes []ResponseAttributeDto `json:"attributes,omitempty"`
	// Signature Attributes
	SignatureAttributes []ResponseAttributeDto `json:"signatureAttributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateRequestDto CertificateRequestDto

// NewCertificateRequestDto instantiates a new CertificateRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateRequestDto(publicKeyAlgorithm string, signatureAlgorithm string, content string, commonName string, subjectDn string) *CertificateRequestDto {
	this := CertificateRequestDto{}
	var certificateRequestFormat CertificateRequestFormat = CERTIFICATEREQUESTFORMAT_PKCS10
	this.CertificateRequestFormat = &certificateRequestFormat
	this.PublicKeyAlgorithm = publicKeyAlgorithm
	this.SignatureAlgorithm = signatureAlgorithm
	this.Content = content
	this.CommonName = commonName
	this.SubjectDn = subjectDn
	return &this
}

// NewCertificateRequestDtoWithDefaults instantiates a new CertificateRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateRequestDtoWithDefaults() *CertificateRequestDto {
	this := CertificateRequestDto{}
	var certificateRequestFormat CertificateRequestFormat = CERTIFICATEREQUESTFORMAT_PKCS10
	this.CertificateRequestFormat = &certificateRequestFormat
	return &this
}

// GetCertificateType returns the CertificateType field value if set, zero value otherwise.
func (o *CertificateRequestDto) GetCertificateType() CertificateType {
	if o == nil || IsNil(o.CertificateType) {
		var ret CertificateType
		return ret
	}
	return *o.CertificateType
}

// GetCertificateTypeOk returns a tuple with the CertificateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRequestDto) GetCertificateTypeOk() (*CertificateType, bool) {
	if o == nil || IsNil(o.CertificateType) {
		return nil, false
	}
	return o.CertificateType, true
}

// HasCertificateType returns a boolean if a field has been set.
func (o *CertificateRequestDto) HasCertificateType() bool {
	if o != nil && !IsNil(o.CertificateType) {
		return true
	}

	return false
}

// SetCertificateType gets a reference to the given CertificateType and assigns it to the CertificateType field.
func (o *CertificateRequestDto) SetCertificateType(v CertificateType) {
	o.CertificateType = &v
}

// GetCertificateRequestFormat returns the CertificateRequestFormat field value if set, zero value otherwise.
func (o *CertificateRequestDto) GetCertificateRequestFormat() CertificateRequestFormat {
	if o == nil || IsNil(o.CertificateRequestFormat) {
		var ret CertificateRequestFormat
		return ret
	}
	return *o.CertificateRequestFormat
}

// GetCertificateRequestFormatOk returns a tuple with the CertificateRequestFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRequestDto) GetCertificateRequestFormatOk() (*CertificateRequestFormat, bool) {
	if o == nil || IsNil(o.CertificateRequestFormat) {
		return nil, false
	}
	return o.CertificateRequestFormat, true
}

// HasCertificateRequestFormat returns a boolean if a field has been set.
func (o *CertificateRequestDto) HasCertificateRequestFormat() bool {
	if o != nil && !IsNil(o.CertificateRequestFormat) {
		return true
	}

	return false
}

// SetCertificateRequestFormat gets a reference to the given CertificateRequestFormat and assigns it to the CertificateRequestFormat field.
func (o *CertificateRequestDto) SetCertificateRequestFormat(v CertificateRequestFormat) {
	o.CertificateRequestFormat = &v
}

// GetPublicKeyAlgorithm returns the PublicKeyAlgorithm field value
func (o *CertificateRequestDto) GetPublicKeyAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKeyAlgorithm
}

// GetPublicKeyAlgorithmOk returns a tuple with the PublicKeyAlgorithm field value
// and a boolean to check if the value has been set.
func (o *CertificateRequestDto) GetPublicKeyAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKeyAlgorithm, true
}

// SetPublicKeyAlgorithm sets field value
func (o *CertificateRequestDto) SetPublicKeyAlgorithm(v string) {
	o.PublicKeyAlgorithm = v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value
func (o *CertificateRequestDto) GetSignatureAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value
// and a boolean to check if the value has been set.
func (o *CertificateRequestDto) GetSignatureAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureAlgorithm, true
}

// SetSignatureAlgorithm sets field value
func (o *CertificateRequestDto) SetSignatureAlgorithm(v string) {
	o.SignatureAlgorithm = v
}

// GetContent returns the Content field value
func (o *CertificateRequestDto) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CertificateRequestDto) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CertificateRequestDto) SetContent(v string) {
	o.Content = v
}

// GetCommonName returns the CommonName field value
func (o *CertificateRequestDto) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *CertificateRequestDto) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *CertificateRequestDto) SetCommonName(v string) {
	o.CommonName = v
}

// GetSubjectDn returns the SubjectDn field value
func (o *CertificateRequestDto) GetSubjectDn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectDn
}

// GetSubjectDnOk returns a tuple with the SubjectDn field value
// and a boolean to check if the value has been set.
func (o *CertificateRequestDto) GetSubjectDnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectDn, true
}

// SetSubjectDn sets field value
func (o *CertificateRequestDto) SetSubjectDn(v string) {
	o.SubjectDn = v
}

// GetSubjectAlternativeNames returns the SubjectAlternativeNames field value if set, zero value otherwise.
func (o *CertificateRequestDto) GetSubjectAlternativeNames() map[string][]string {
	if o == nil || IsNil(o.SubjectAlternativeNames) {
		var ret map[string][]string
		return ret
	}
	return o.SubjectAlternativeNames
}

// GetSubjectAlternativeNamesOk returns a tuple with the SubjectAlternativeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRequestDto) GetSubjectAlternativeNamesOk() (map[string][]string, bool) {
	if o == nil || IsNil(o.SubjectAlternativeNames) {
		return map[string][]string{}, false
	}
	return o.SubjectAlternativeNames, true
}

// HasSubjectAlternativeNames returns a boolean if a field has been set.
func (o *CertificateRequestDto) HasSubjectAlternativeNames() bool {
	if o != nil && !IsNil(o.SubjectAlternativeNames) {
		return true
	}

	return false
}

// SetSubjectAlternativeNames gets a reference to the given map[string]map[string]interface{} and assigns it to the SubjectAlternativeNames field.
func (o *CertificateRequestDto) SetSubjectAlternativeNames(v map[string][]string) {
	o.SubjectAlternativeNames = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *CertificateRequestDto) GetAttributes() []ResponseAttributeDto {
	if o == nil || IsNil(o.Attributes) {
		var ret []ResponseAttributeDto
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRequestDto) GetAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *CertificateRequestDto) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ResponseAttributeDto and assigns it to the Attributes field.
func (o *CertificateRequestDto) SetAttributes(v []ResponseAttributeDto) {
	o.Attributes = v
}

// GetSignatureAttributes returns the SignatureAttributes field value if set, zero value otherwise.
func (o *CertificateRequestDto) GetSignatureAttributes() []ResponseAttributeDto {
	if o == nil || IsNil(o.SignatureAttributes) {
		var ret []ResponseAttributeDto
		return ret
	}
	return o.SignatureAttributes
}

// GetSignatureAttributesOk returns a tuple with the SignatureAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRequestDto) GetSignatureAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil || IsNil(o.SignatureAttributes) {
		return nil, false
	}
	return o.SignatureAttributes, true
}

// HasSignatureAttributes returns a boolean if a field has been set.
func (o *CertificateRequestDto) HasSignatureAttributes() bool {
	if o != nil && !IsNil(o.SignatureAttributes) {
		return true
	}

	return false
}

// SetSignatureAttributes gets a reference to the given []ResponseAttributeDto and assigns it to the SignatureAttributes field.
func (o *CertificateRequestDto) SetSignatureAttributes(v []ResponseAttributeDto) {
	o.SignatureAttributes = v
}

func (o CertificateRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateType) {
		toSerialize["certificateType"] = o.CertificateType
	}
	if !IsNil(o.CertificateRequestFormat) {
		toSerialize["certificateRequestFormat"] = o.CertificateRequestFormat
	}
	toSerialize["publicKeyAlgorithm"] = o.PublicKeyAlgorithm
	toSerialize["signatureAlgorithm"] = o.SignatureAlgorithm
	toSerialize["content"] = o.Content
	toSerialize["commonName"] = o.CommonName
	toSerialize["subjectDn"] = o.SubjectDn
	if !IsNil(o.SubjectAlternativeNames) {
		toSerialize["subjectAlternativeNames"] = o.SubjectAlternativeNames
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.SignatureAttributes) {
		toSerialize["signatureAttributes"] = o.SignatureAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateRequestDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"publicKeyAlgorithm",
		"signatureAlgorithm",
		"content",
		"commonName",
		"subjectDn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateRequestDto := _CertificateRequestDto{}

	err = json.Unmarshal(data, &varCertificateRequestDto)

	if err != nil {
		return err
	}

	*o = CertificateRequestDto(varCertificateRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificateType")
		delete(additionalProperties, "certificateRequestFormat")
		delete(additionalProperties, "publicKeyAlgorithm")
		delete(additionalProperties, "signatureAlgorithm")
		delete(additionalProperties, "content")
		delete(additionalProperties, "commonName")
		delete(additionalProperties, "subjectDn")
		delete(additionalProperties, "subjectAlternativeNames")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "signatureAttributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateRequestDto struct {
	value *CertificateRequestDto
	isSet bool
}

func (v NullableCertificateRequestDto) Get() *CertificateRequestDto {
	return v.value
}

func (v *NullableCertificateRequestDto) Set(val *CertificateRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateRequestDto(val *CertificateRequestDto) *NullableCertificateRequestDto {
	return &NullableCertificateRequestDto{value: val, isSet: true}
}

func (v NullableCertificateRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


