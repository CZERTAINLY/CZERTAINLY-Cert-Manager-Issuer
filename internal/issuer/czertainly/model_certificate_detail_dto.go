/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.1-SNAPSHOT
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the CertificateDetailDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateDetailDto{}

// CertificateDetailDto struct for CertificateDetailDto
type CertificateDetailDto struct {
	State CertificateState `json:"state"`
	// Base64 encoded Certificate content
	CertificateContent string `json:"certificateContent"`
	AdditionalProperties map[string]interface{}
}

type _CertificateDetailDto CertificateDetailDto

// NewCertificateDetailDto instantiates a new CertificateDetailDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateDetailDto(state CertificateState, certificateContent string) *CertificateDetailDto {
	this := CertificateDetailDto{}
	this.State = state
	this.CertificateContent = certificateContent
	return &this
}

// NewCertificateDetailDtoWithDefaults instantiates a new CertificateDetailDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateDetailDtoWithDefaults() *CertificateDetailDto {
	this := CertificateDetailDto{}
	return &this
}

// GetState returns the State field value
func (o *CertificateDetailDto) GetState() CertificateState {
	if o == nil {
		var ret CertificateState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetStateOk() (*CertificateState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CertificateDetailDto) SetState(v CertificateState) {
	o.State = v
}

// GetCertificateContent returns the CertificateContent field value
func (o *CertificateDetailDto) GetCertificateContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateContent
}

// GetCertificateContentOk returns a tuple with the CertificateContent field value
// and a boolean to check if the value has been set.
func (o *CertificateDetailDto) GetCertificateContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateContent, true
}

// SetCertificateContent sets field value
func (o *CertificateDetailDto) SetCertificateContent(v string) {
	o.CertificateContent = v
}

func (o CertificateDetailDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateDetailDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["state"] = o.State
	toSerialize["certificateContent"] = o.CertificateContent

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateDetailDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateDetailDto := _CertificateDetailDto{}

	err = json.Unmarshal(data, &varCertificateDetailDto)

	if err != nil {
		return err
	}

	*o = CertificateDetailDto(varCertificateDetailDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "state")
		delete(additionalProperties, "certificateContent")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateDetailDto struct {
	value *CertificateDetailDto
	isSet bool
}

func (v NullableCertificateDetailDto) Get() *CertificateDetailDto {
	return v.value
}

func (v *NullableCertificateDetailDto) Set(val *CertificateDetailDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateDetailDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateDetailDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateDetailDto(val *CertificateDetailDto) *NullableCertificateDetailDto {
	return &NullableCertificateDetailDto{value: val, isSet: true}
}

func (v NullableCertificateDetailDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateDetailDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


