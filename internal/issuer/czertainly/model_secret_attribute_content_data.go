/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.1-SNAPSHOT
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
)

// checks if the SecretAttributeContentData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretAttributeContentData{}

// SecretAttributeContentData Secret attribute content data
type SecretAttributeContentData struct {
	// Secret attribute data
	Secret *string `json:"secret,omitempty"`
	// Level of protection of the data
	ProtectionLevel *string `json:"protectionLevel,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SecretAttributeContentData SecretAttributeContentData

// NewSecretAttributeContentData instantiates a new SecretAttributeContentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretAttributeContentData() *SecretAttributeContentData {
	this := SecretAttributeContentData{}
	return &this
}

// NewSecretAttributeContentDataWithDefaults instantiates a new SecretAttributeContentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretAttributeContentDataWithDefaults() *SecretAttributeContentData {
	this := SecretAttributeContentData{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *SecretAttributeContentData) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretAttributeContentData) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *SecretAttributeContentData) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *SecretAttributeContentData) SetSecret(v string) {
	o.Secret = &v
}

// GetProtectionLevel returns the ProtectionLevel field value if set, zero value otherwise.
func (o *SecretAttributeContentData) GetProtectionLevel() string {
	if o == nil || IsNil(o.ProtectionLevel) {
		var ret string
		return ret
	}
	return *o.ProtectionLevel
}

// GetProtectionLevelOk returns a tuple with the ProtectionLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretAttributeContentData) GetProtectionLevelOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionLevel) {
		return nil, false
	}
	return o.ProtectionLevel, true
}

// HasProtectionLevel returns a boolean if a field has been set.
func (o *SecretAttributeContentData) HasProtectionLevel() bool {
	if o != nil && !IsNil(o.ProtectionLevel) {
		return true
	}

	return false
}

// SetProtectionLevel gets a reference to the given string and assigns it to the ProtectionLevel field.
func (o *SecretAttributeContentData) SetProtectionLevel(v string) {
	o.ProtectionLevel = &v
}

func (o SecretAttributeContentData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretAttributeContentData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.ProtectionLevel) {
		toSerialize["protectionLevel"] = o.ProtectionLevel
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecretAttributeContentData) UnmarshalJSON(data []byte) (err error) {
	varSecretAttributeContentData := _SecretAttributeContentData{}

	err = json.Unmarshal(data, &varSecretAttributeContentData)

	if err != nil {
		return err
	}

	*o = SecretAttributeContentData(varSecretAttributeContentData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "secret")
		delete(additionalProperties, "protectionLevel")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecretAttributeContentData struct {
	value *SecretAttributeContentData
	isSet bool
}

func (v NullableSecretAttributeContentData) Get() *SecretAttributeContentData {
	return v.value
}

func (v *NullableSecretAttributeContentData) Set(val *SecretAttributeContentData) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretAttributeContentData) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretAttributeContentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretAttributeContentData(val *SecretAttributeContentData) *NullableSecretAttributeContentData {
	return &NullableSecretAttributeContentData{value: val, isSet: true}
}

func (v NullableSecretAttributeContentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretAttributeContentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


