/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.0
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the ClientCertificateDataResponseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientCertificateDataResponseDto{}

// ClientCertificateDataResponseDto struct for ClientCertificateDataResponseDto
type ClientCertificateDataResponseDto struct {
	// Base64 encoded Certificate content
	CertificateData *string `json:"certificateData,omitempty"`
	// UUID of Certificate
	Uuid string `json:"uuid"`
	AdditionalProperties map[string]interface{}
}

type _ClientCertificateDataResponseDto ClientCertificateDataResponseDto

// NewClientCertificateDataResponseDto instantiates a new ClientCertificateDataResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientCertificateDataResponseDto(uuid string) *ClientCertificateDataResponseDto {
	this := ClientCertificateDataResponseDto{}
	this.Uuid = uuid
	return &this
}

// NewClientCertificateDataResponseDtoWithDefaults instantiates a new ClientCertificateDataResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientCertificateDataResponseDtoWithDefaults() *ClientCertificateDataResponseDto {
	this := ClientCertificateDataResponseDto{}
	return &this
}

// GetCertificateData returns the CertificateData field value if set, zero value otherwise.
func (o *ClientCertificateDataResponseDto) GetCertificateData() string {
	if o == nil || IsNil(o.CertificateData) {
		var ret string
		return ret
	}
	return *o.CertificateData
}

// GetCertificateDataOk returns a tuple with the CertificateData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientCertificateDataResponseDto) GetCertificateDataOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateData) {
		return nil, false
	}
	return o.CertificateData, true
}

// HasCertificateData returns a boolean if a field has been set.
func (o *ClientCertificateDataResponseDto) HasCertificateData() bool {
	if o != nil && !IsNil(o.CertificateData) {
		return true
	}

	return false
}

// SetCertificateData gets a reference to the given string and assigns it to the CertificateData field.
func (o *ClientCertificateDataResponseDto) SetCertificateData(v string) {
	o.CertificateData = &v
}

// GetUuid returns the Uuid field value
func (o *ClientCertificateDataResponseDto) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *ClientCertificateDataResponseDto) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *ClientCertificateDataResponseDto) SetUuid(v string) {
	o.Uuid = v
}

func (o ClientCertificateDataResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientCertificateDataResponseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateData) {
		toSerialize["certificateData"] = o.CertificateData
	}
	toSerialize["uuid"] = o.Uuid

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClientCertificateDataResponseDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClientCertificateDataResponseDto := _ClientCertificateDataResponseDto{}

	err = json.Unmarshal(data, &varClientCertificateDataResponseDto)

	if err != nil {
		return err
	}

	*o = ClientCertificateDataResponseDto(varClientCertificateDataResponseDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificateData")
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClientCertificateDataResponseDto struct {
	value *ClientCertificateDataResponseDto
	isSet bool
}

func (v NullableClientCertificateDataResponseDto) Get() *ClientCertificateDataResponseDto {
	return v.value
}

func (v *NullableClientCertificateDataResponseDto) Set(val *ClientCertificateDataResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableClientCertificateDataResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableClientCertificateDataResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientCertificateDataResponseDto(val *ClientCertificateDataResponseDto) *NullableClientCertificateDataResponseDto {
	return &NullableClientCertificateDataResponseDto{value: val, isSet: true}
}

func (v NullableClientCertificateDataResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientCertificateDataResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


