/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.1-SNAPSHOT
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the DataAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataAttribute{}

// DataAttribute Data attribute allows to store and transfer dynamic data. Its content can be edited and send in requests to store.
type DataAttribute struct {
	// UUID of the Attribute for unique identification
	Uuid string `json:"uuid"`
	// Name of the Attribute that is used for identification
	Name string `json:"name"`
	// Optional description of the Attribute, should contain helper text on what is expected
	Description *string `json:"description,omitempty"`
	// Content of the Attribute
	Content []BaseAttributeContentDto `json:"content,omitempty"`
	Type AttributeType `json:"type"`
	ContentType AttributeContentType `json:"contentType"`
	Properties DataAttributeProperties `json:"properties"`
	// Optional regular expressions and constraints used for validating the Attribute content
	Constraints []BaseAttributeConstraint `json:"constraints,omitempty"`
	AttributeCallback *AttributeCallback `json:"attributeCallback,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DataAttribute DataAttribute

// NewDataAttribute instantiates a new DataAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataAttribute(uuid string, name string, type_ AttributeType, contentType AttributeContentType, properties DataAttributeProperties) *DataAttribute {
	this := DataAttribute{}
	this.Uuid = uuid
	this.Name = name
	this.Type = type_
	this.ContentType = contentType
	this.Properties = properties
	return &this
}

// NewDataAttributeWithDefaults instantiates a new DataAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataAttributeWithDefaults() *DataAttribute {
	this := DataAttribute{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *DataAttribute) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *DataAttribute) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *DataAttribute) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *DataAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataAttribute) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DataAttribute) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAttribute) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DataAttribute) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DataAttribute) SetDescription(v string) {
	o.Description = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *DataAttribute) GetContent() []BaseAttributeContentDto {
	if o == nil || IsNil(o.Content) {
		var ret []BaseAttributeContentDto
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAttribute) GetContentOk() ([]BaseAttributeContentDto, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *DataAttribute) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given []BaseAttributeContentDto and assigns it to the Content field.
func (o *DataAttribute) SetContent(v []BaseAttributeContentDto) {
	o.Content = v
}

// GetType returns the Type field value
func (o *DataAttribute) GetType() AttributeType {
	if o == nil {
		var ret AttributeType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DataAttribute) GetTypeOk() (*AttributeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DataAttribute) SetType(v AttributeType) {
	o.Type = v
}

// GetContentType returns the ContentType field value
func (o *DataAttribute) GetContentType() AttributeContentType {
	if o == nil {
		var ret AttributeContentType
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *DataAttribute) GetContentTypeOk() (*AttributeContentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *DataAttribute) SetContentType(v AttributeContentType) {
	o.ContentType = v
}

// GetProperties returns the Properties field value
func (o *DataAttribute) GetProperties() DataAttributeProperties {
	if o == nil {
		var ret DataAttributeProperties
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *DataAttribute) GetPropertiesOk() (*DataAttributeProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *DataAttribute) SetProperties(v DataAttributeProperties) {
	o.Properties = v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *DataAttribute) GetConstraints() []BaseAttributeConstraint {
	if o == nil || IsNil(o.Constraints) {
		var ret []BaseAttributeConstraint
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAttribute) GetConstraintsOk() ([]BaseAttributeConstraint, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *DataAttribute) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []BaseAttributeConstraint and assigns it to the Constraints field.
func (o *DataAttribute) SetConstraints(v []BaseAttributeConstraint) {
	o.Constraints = v
}

// GetAttributeCallback returns the AttributeCallback field value if set, zero value otherwise.
func (o *DataAttribute) GetAttributeCallback() AttributeCallback {
	if o == nil || IsNil(o.AttributeCallback) {
		var ret AttributeCallback
		return ret
	}
	return *o.AttributeCallback
}

// GetAttributeCallbackOk returns a tuple with the AttributeCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAttribute) GetAttributeCallbackOk() (*AttributeCallback, bool) {
	if o == nil || IsNil(o.AttributeCallback) {
		return nil, false
	}
	return o.AttributeCallback, true
}

// HasAttributeCallback returns a boolean if a field has been set.
func (o *DataAttribute) HasAttributeCallback() bool {
	if o != nil && !IsNil(o.AttributeCallback) {
		return true
	}

	return false
}

// SetAttributeCallback gets a reference to the given AttributeCallback and assigns it to the AttributeCallback field.
func (o *DataAttribute) SetAttributeCallback(v AttributeCallback) {
	o.AttributeCallback = &v
}

func (o DataAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	toSerialize["type"] = o.Type
	toSerialize["contentType"] = o.ContentType
	toSerialize["properties"] = o.Properties
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if !IsNil(o.AttributeCallback) {
		toSerialize["attributeCallback"] = o.AttributeCallback
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DataAttribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"name",
		"type",
		"contentType",
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataAttribute := _DataAttribute{}

	err = json.Unmarshal(data, &varDataAttribute)

	if err != nil {
		return err
	}

	*o = DataAttribute(varDataAttribute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "content")
		delete(additionalProperties, "type")
		delete(additionalProperties, "contentType")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "constraints")
		delete(additionalProperties, "attributeCallback")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDataAttribute struct {
	value *DataAttribute
	isSet bool
}

func (v NullableDataAttribute) Get() *DataAttribute {
	return v.value
}

func (v *NullableDataAttribute) Set(val *DataAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableDataAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableDataAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataAttribute(val *DataAttribute) *NullableDataAttribute {
	return &NullableDataAttribute{value: val, isSet: true}
}

func (v NullableDataAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


