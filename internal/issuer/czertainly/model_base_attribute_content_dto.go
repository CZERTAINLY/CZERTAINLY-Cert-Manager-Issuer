/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.0
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// BaseAttributeContentDto - Base Attribute content definition
type BaseAttributeContentDto struct {
	BooleanAttributeContent *BooleanAttributeContent
	CodeBlockAttributeContent *CodeBlockAttributeContent
	CredentialAttributeContent *CredentialAttributeContent
	DateAttributeContent *DateAttributeContent
	DateTimeAttributeContent *DateTimeAttributeContent
	FileAttributeContent *FileAttributeContent
	FloatAttributeContent *FloatAttributeContent
	IntegerAttributeContent *IntegerAttributeContent
	ObjectAttributeContent *ObjectAttributeContent
	SecretAttributeContent *SecretAttributeContent
	StringAttributeContent *StringAttributeContent
	TextAttributeContent *TextAttributeContent
	TimeAttributeContent *TimeAttributeContent
}

// BooleanAttributeContentAsBaseAttributeContentDto is a convenience function that returns BooleanAttributeContent wrapped in BaseAttributeContentDto
func BooleanAttributeContentAsBaseAttributeContentDto(v *BooleanAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		BooleanAttributeContent: v,
	}
}

// CodeBlockAttributeContentAsBaseAttributeContentDto is a convenience function that returns CodeBlockAttributeContent wrapped in BaseAttributeContentDto
func CodeBlockAttributeContentAsBaseAttributeContentDto(v *CodeBlockAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		CodeBlockAttributeContent: v,
	}
}

// CredentialAttributeContentAsBaseAttributeContentDto is a convenience function that returns CredentialAttributeContent wrapped in BaseAttributeContentDto
func CredentialAttributeContentAsBaseAttributeContentDto(v *CredentialAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		CredentialAttributeContent: v,
	}
}

// DateAttributeContentAsBaseAttributeContentDto is a convenience function that returns DateAttributeContent wrapped in BaseAttributeContentDto
func DateAttributeContentAsBaseAttributeContentDto(v *DateAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		DateAttributeContent: v,
	}
}

// DateTimeAttributeContentAsBaseAttributeContentDto is a convenience function that returns DateTimeAttributeContent wrapped in BaseAttributeContentDto
func DateTimeAttributeContentAsBaseAttributeContentDto(v *DateTimeAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		DateTimeAttributeContent: v,
	}
}

// FileAttributeContentAsBaseAttributeContentDto is a convenience function that returns FileAttributeContent wrapped in BaseAttributeContentDto
func FileAttributeContentAsBaseAttributeContentDto(v *FileAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		FileAttributeContent: v,
	}
}

// FloatAttributeContentAsBaseAttributeContentDto is a convenience function that returns FloatAttributeContent wrapped in BaseAttributeContentDto
func FloatAttributeContentAsBaseAttributeContentDto(v *FloatAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		FloatAttributeContent: v,
	}
}

// IntegerAttributeContentAsBaseAttributeContentDto is a convenience function that returns IntegerAttributeContent wrapped in BaseAttributeContentDto
func IntegerAttributeContentAsBaseAttributeContentDto(v *IntegerAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		IntegerAttributeContent: v,
	}
}

// ObjectAttributeContentAsBaseAttributeContentDto is a convenience function that returns ObjectAttributeContent wrapped in BaseAttributeContentDto
func ObjectAttributeContentAsBaseAttributeContentDto(v *ObjectAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		ObjectAttributeContent: v,
	}
}

// SecretAttributeContentAsBaseAttributeContentDto is a convenience function that returns SecretAttributeContent wrapped in BaseAttributeContentDto
func SecretAttributeContentAsBaseAttributeContentDto(v *SecretAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		SecretAttributeContent: v,
	}
}

// StringAttributeContentAsBaseAttributeContentDto is a convenience function that returns StringAttributeContent wrapped in BaseAttributeContentDto
func StringAttributeContentAsBaseAttributeContentDto(v *StringAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		StringAttributeContent: v,
	}
}

// TextAttributeContentAsBaseAttributeContentDto is a convenience function that returns TextAttributeContent wrapped in BaseAttributeContentDto
func TextAttributeContentAsBaseAttributeContentDto(v *TextAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		TextAttributeContent: v,
	}
}

// TimeAttributeContentAsBaseAttributeContentDto is a convenience function that returns TimeAttributeContent wrapped in BaseAttributeContentDto
func TimeAttributeContentAsBaseAttributeContentDto(v *TimeAttributeContent) BaseAttributeContentDto {
	return BaseAttributeContentDto{
		TimeAttributeContent: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BaseAttributeContentDto) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BooleanAttributeContent
	err = newStrictDecoder(data).Decode(&dst.BooleanAttributeContent)
	if err == nil {
		jsonBooleanAttributeContent, _ := json.Marshal(dst.BooleanAttributeContent)
		if string(jsonBooleanAttributeContent) == "{}" { // empty struct
			dst.BooleanAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.BooleanAttributeContent = nil
	}

	// try to unmarshal data into CodeBlockAttributeContent
	err = newStrictDecoder(data).Decode(&dst.CodeBlockAttributeContent)
	if err == nil {
		jsonCodeBlockAttributeContent, _ := json.Marshal(dst.CodeBlockAttributeContent)
		if string(jsonCodeBlockAttributeContent) == "{}" { // empty struct
			dst.CodeBlockAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.CodeBlockAttributeContent = nil
	}

	// try to unmarshal data into CredentialAttributeContent
	err = newStrictDecoder(data).Decode(&dst.CredentialAttributeContent)
	if err == nil {
		jsonCredentialAttributeContent, _ := json.Marshal(dst.CredentialAttributeContent)
		if string(jsonCredentialAttributeContent) == "{}" { // empty struct
			dst.CredentialAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.CredentialAttributeContent = nil
	}

	// try to unmarshal data into DateAttributeContent
	err = newStrictDecoder(data).Decode(&dst.DateAttributeContent)
	if err == nil {
		jsonDateAttributeContent, _ := json.Marshal(dst.DateAttributeContent)
		if string(jsonDateAttributeContent) == "{}" { // empty struct
			dst.DateAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.DateAttributeContent = nil
	}

	// try to unmarshal data into DateTimeAttributeContent
	err = newStrictDecoder(data).Decode(&dst.DateTimeAttributeContent)
	if err == nil {
		jsonDateTimeAttributeContent, _ := json.Marshal(dst.DateTimeAttributeContent)
		if string(jsonDateTimeAttributeContent) == "{}" { // empty struct
			dst.DateTimeAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.DateTimeAttributeContent = nil
	}

	// try to unmarshal data into FileAttributeContent
	err = newStrictDecoder(data).Decode(&dst.FileAttributeContent)
	if err == nil {
		jsonFileAttributeContent, _ := json.Marshal(dst.FileAttributeContent)
		if string(jsonFileAttributeContent) == "{}" { // empty struct
			dst.FileAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.FileAttributeContent = nil
	}

	// try to unmarshal data into FloatAttributeContent
	err = newStrictDecoder(data).Decode(&dst.FloatAttributeContent)
	if err == nil {
		jsonFloatAttributeContent, _ := json.Marshal(dst.FloatAttributeContent)
		if string(jsonFloatAttributeContent) == "{}" { // empty struct
			dst.FloatAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.FloatAttributeContent = nil
	}

	// try to unmarshal data into IntegerAttributeContent
	err = newStrictDecoder(data).Decode(&dst.IntegerAttributeContent)
	if err == nil {
		jsonIntegerAttributeContent, _ := json.Marshal(dst.IntegerAttributeContent)
		if string(jsonIntegerAttributeContent) == "{}" { // empty struct
			dst.IntegerAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.IntegerAttributeContent = nil
	}

	// try to unmarshal data into ObjectAttributeContent
	err = newStrictDecoder(data).Decode(&dst.ObjectAttributeContent)
	if err == nil {
		jsonObjectAttributeContent, _ := json.Marshal(dst.ObjectAttributeContent)
		if string(jsonObjectAttributeContent) == "{}" { // empty struct
			dst.ObjectAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.ObjectAttributeContent = nil
	}

	// try to unmarshal data into SecretAttributeContent
	err = newStrictDecoder(data).Decode(&dst.SecretAttributeContent)
	if err == nil {
		jsonSecretAttributeContent, _ := json.Marshal(dst.SecretAttributeContent)
		if string(jsonSecretAttributeContent) == "{}" { // empty struct
			dst.SecretAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.SecretAttributeContent = nil
	}

	// try to unmarshal data into StringAttributeContent
	err = newStrictDecoder(data).Decode(&dst.StringAttributeContent)
	if err == nil {
		jsonStringAttributeContent, _ := json.Marshal(dst.StringAttributeContent)
		if string(jsonStringAttributeContent) == "{}" { // empty struct
			dst.StringAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.StringAttributeContent = nil
	}

	// try to unmarshal data into TextAttributeContent
	err = newStrictDecoder(data).Decode(&dst.TextAttributeContent)
	if err == nil {
		jsonTextAttributeContent, _ := json.Marshal(dst.TextAttributeContent)
		if string(jsonTextAttributeContent) == "{}" { // empty struct
			dst.TextAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.TextAttributeContent = nil
	}

	// try to unmarshal data into TimeAttributeContent
	err = newStrictDecoder(data).Decode(&dst.TimeAttributeContent)
	if err == nil {
		jsonTimeAttributeContent, _ := json.Marshal(dst.TimeAttributeContent)
		if string(jsonTimeAttributeContent) == "{}" { // empty struct
			dst.TimeAttributeContent = nil
		} else {
			match++
		}
	} else {
		dst.TimeAttributeContent = nil
	}

	if match > 1 { // more than 1 match
		// let's continue and pick the correct one later
		return nil
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BaseAttributeContentDto)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BaseAttributeContentDto) MarshalJSON() ([]byte, error) {
	if src.BooleanAttributeContent != nil {
		return json.Marshal(&src.BooleanAttributeContent)
	}

	if src.CodeBlockAttributeContent != nil {
		return json.Marshal(&src.CodeBlockAttributeContent)
	}

	if src.CredentialAttributeContent != nil {
		return json.Marshal(&src.CredentialAttributeContent)
	}

	if src.DateAttributeContent != nil {
		return json.Marshal(&src.DateAttributeContent)
	}

	if src.DateTimeAttributeContent != nil {
		return json.Marshal(&src.DateTimeAttributeContent)
	}

	if src.FileAttributeContent != nil {
		return json.Marshal(&src.FileAttributeContent)
	}

	if src.FloatAttributeContent != nil {
		return json.Marshal(&src.FloatAttributeContent)
	}

	if src.IntegerAttributeContent != nil {
		return json.Marshal(&src.IntegerAttributeContent)
	}

	if src.ObjectAttributeContent != nil {
		return json.Marshal(&src.ObjectAttributeContent)
	}

	if src.SecretAttributeContent != nil {
		return json.Marshal(&src.SecretAttributeContent)
	}

	if src.StringAttributeContent != nil {
		return json.Marshal(&src.StringAttributeContent)
	}

	if src.TextAttributeContent != nil {
		return json.Marshal(&src.TextAttributeContent)
	}

	if src.TimeAttributeContent != nil {
		return json.Marshal(&src.TimeAttributeContent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BaseAttributeContentDto) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BooleanAttributeContent != nil {
		return obj.BooleanAttributeContent
	}

	if obj.CodeBlockAttributeContent != nil {
		return obj.CodeBlockAttributeContent
	}

	if obj.CredentialAttributeContent != nil {
		return obj.CredentialAttributeContent
	}

	if obj.DateAttributeContent != nil {
		return obj.DateAttributeContent
	}

	if obj.DateTimeAttributeContent != nil {
		return obj.DateTimeAttributeContent
	}

	if obj.FileAttributeContent != nil {
		return obj.FileAttributeContent
	}

	if obj.FloatAttributeContent != nil {
		return obj.FloatAttributeContent
	}

	if obj.IntegerAttributeContent != nil {
		return obj.IntegerAttributeContent
	}

	if obj.ObjectAttributeContent != nil {
		return obj.ObjectAttributeContent
	}

	if obj.SecretAttributeContent != nil {
		return obj.SecretAttributeContent
	}

	if obj.StringAttributeContent != nil {
		return obj.StringAttributeContent
	}

	if obj.TextAttributeContent != nil {
		return obj.TextAttributeContent
	}

	if obj.TimeAttributeContent != nil {
		return obj.TimeAttributeContent
	}

	// all schemas are nil
	return nil
}

type NullableBaseAttributeContentDto struct {
	value *BaseAttributeContentDto
	isSet bool
}

func (v NullableBaseAttributeContentDto) Get() *BaseAttributeContentDto {
	return v.value
}

func (v *NullableBaseAttributeContentDto) Set(val *BaseAttributeContentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseAttributeContentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseAttributeContentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseAttributeContentDto(val *BaseAttributeContentDto) *NullableBaseAttributeContentDto {
	return &NullableBaseAttributeContentDto{value: val, isSet: true}
}

func (v NullableBaseAttributeContentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseAttributeContentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


