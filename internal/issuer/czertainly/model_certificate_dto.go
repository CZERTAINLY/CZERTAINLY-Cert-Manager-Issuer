/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.0
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CertificateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateDto{}

// CertificateDto List of related certificates
type CertificateDto struct {
	// UUID of the Certificate
	Uuid string `json:"uuid"`
	// Certificate common name
	CommonName string `json:"commonName"`
	// Certificate serial number
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Certificate issuer common name
	IssuerCommonName *string `json:"issuerCommonName,omitempty"`
	// Issuer DN of the Certificate
	IssuerDn *string `json:"issuerDn,omitempty"`
	// Subject DN of the Certificate
	SubjectDn string `json:"subjectDn"`
	// Certificate validity start date
	NotBefore *time.Time `json:"notBefore,omitempty"`
	// Certificate expiration date
	NotAfter *time.Time `json:"notAfter,omitempty"`
	// Public key algorithm
	PublicKeyAlgorithm string `json:"publicKeyAlgorithm"`
	// Certificate signature algorithm
	SignatureAlgorithm string `json:"signatureAlgorithm"`
	// Certificate key size
	KeySize int32 `json:"keySize"`
	State CertificateState `json:"state"`
	ValidationStatus CertificateValidationStatus `json:"validationStatus"`
	RaProfile *SimplifiedRaProfileDto `json:"raProfile,omitempty"`
	// SHA256 fingerprint of the Certificate
	Fingerprint *string `json:"fingerprint,omitempty"`
	// Groups associated to the Certificate
	Groups []GroupDto `json:"groups,omitempty"`
	// Certificate Owner
	Owner *string `json:"owner,omitempty"`
	// Certificate Owner UUID
	OwnerUuid *string `json:"ownerUuid,omitempty"`
	CertificateType *CertificateType `json:"certificateType,omitempty"`
	// Serial number of the issuer
	IssuerSerialNumber *string `json:"issuerSerialNumber,omitempty"`
	ComplianceStatus *ComplianceStatus `json:"complianceStatus,omitempty"`
	// UUID of the issuer certificate
	IssuerCertificateUuid *string `json:"issuerCertificateUuid,omitempty"`
	// Private Key Availability
	PrivateKeyAvailability bool `json:"privateKeyAvailability"`
	// Indicator whether CA is marked as trusted, set to null if certificate is not CA
	TrustedCa bool `json:"trustedCa"`
	AdditionalProperties map[string]interface{}
}

type _CertificateDto CertificateDto

// NewCertificateDto instantiates a new CertificateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateDto(uuid string, commonName string, subjectDn string, publicKeyAlgorithm string, signatureAlgorithm string, keySize int32, state CertificateState, validationStatus CertificateValidationStatus, privateKeyAvailability bool, trustedCa bool) *CertificateDto {
	this := CertificateDto{}
	this.Uuid = uuid
	this.CommonName = commonName
	this.SubjectDn = subjectDn
	this.PublicKeyAlgorithm = publicKeyAlgorithm
	this.SignatureAlgorithm = signatureAlgorithm
	this.KeySize = keySize
	this.State = state
	this.ValidationStatus = validationStatus
	this.PrivateKeyAvailability = privateKeyAvailability
	this.TrustedCa = trustedCa
	return &this
}

// NewCertificateDtoWithDefaults instantiates a new CertificateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateDtoWithDefaults() *CertificateDto {
	this := CertificateDto{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *CertificateDto) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *CertificateDto) SetUuid(v string) {
	o.Uuid = v
}

// GetCommonName returns the CommonName field value
func (o *CertificateDto) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *CertificateDto) SetCommonName(v string) {
	o.CommonName = v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *CertificateDto) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *CertificateDto) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *CertificateDto) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetIssuerCommonName returns the IssuerCommonName field value if set, zero value otherwise.
func (o *CertificateDto) GetIssuerCommonName() string {
	if o == nil || IsNil(o.IssuerCommonName) {
		var ret string
		return ret
	}
	return *o.IssuerCommonName
}

// GetIssuerCommonNameOk returns a tuple with the IssuerCommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetIssuerCommonNameOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerCommonName) {
		return nil, false
	}
	return o.IssuerCommonName, true
}

// HasIssuerCommonName returns a boolean if a field has been set.
func (o *CertificateDto) HasIssuerCommonName() bool {
	if o != nil && !IsNil(o.IssuerCommonName) {
		return true
	}

	return false
}

// SetIssuerCommonName gets a reference to the given string and assigns it to the IssuerCommonName field.
func (o *CertificateDto) SetIssuerCommonName(v string) {
	o.IssuerCommonName = &v
}

// GetIssuerDn returns the IssuerDn field value if set, zero value otherwise.
func (o *CertificateDto) GetIssuerDn() string {
	if o == nil || IsNil(o.IssuerDn) {
		var ret string
		return ret
	}
	return *o.IssuerDn
}

// GetIssuerDnOk returns a tuple with the IssuerDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetIssuerDnOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerDn) {
		return nil, false
	}
	return o.IssuerDn, true
}

// HasIssuerDn returns a boolean if a field has been set.
func (o *CertificateDto) HasIssuerDn() bool {
	if o != nil && !IsNil(o.IssuerDn) {
		return true
	}

	return false
}

// SetIssuerDn gets a reference to the given string and assigns it to the IssuerDn field.
func (o *CertificateDto) SetIssuerDn(v string) {
	o.IssuerDn = &v
}

// GetSubjectDn returns the SubjectDn field value
func (o *CertificateDto) GetSubjectDn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectDn
}

// GetSubjectDnOk returns a tuple with the SubjectDn field value
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetSubjectDnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectDn, true
}

// SetSubjectDn sets field value
func (o *CertificateDto) SetSubjectDn(v string) {
	o.SubjectDn = v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *CertificateDto) GetNotBefore() time.Time {
	if o == nil || IsNil(o.NotBefore) {
		var ret time.Time
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetNotBeforeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NotBefore) {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *CertificateDto) HasNotBefore() bool {
	if o != nil && !IsNil(o.NotBefore) {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given time.Time and assigns it to the NotBefore field.
func (o *CertificateDto) SetNotBefore(v time.Time) {
	o.NotBefore = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *CertificateDto) GetNotAfter() time.Time {
	if o == nil || IsNil(o.NotAfter) {
		var ret time.Time
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetNotAfterOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NotAfter) {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *CertificateDto) HasNotAfter() bool {
	if o != nil && !IsNil(o.NotAfter) {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given time.Time and assigns it to the NotAfter field.
func (o *CertificateDto) SetNotAfter(v time.Time) {
	o.NotAfter = &v
}

// GetPublicKeyAlgorithm returns the PublicKeyAlgorithm field value
func (o *CertificateDto) GetPublicKeyAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKeyAlgorithm
}

// GetPublicKeyAlgorithmOk returns a tuple with the PublicKeyAlgorithm field value
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetPublicKeyAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKeyAlgorithm, true
}

// SetPublicKeyAlgorithm sets field value
func (o *CertificateDto) SetPublicKeyAlgorithm(v string) {
	o.PublicKeyAlgorithm = v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value
func (o *CertificateDto) GetSignatureAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetSignatureAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureAlgorithm, true
}

// SetSignatureAlgorithm sets field value
func (o *CertificateDto) SetSignatureAlgorithm(v string) {
	o.SignatureAlgorithm = v
}

// GetKeySize returns the KeySize field value
func (o *CertificateDto) GetKeySize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KeySize
}

// GetKeySizeOk returns a tuple with the KeySize field value
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetKeySizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeySize, true
}

// SetKeySize sets field value
func (o *CertificateDto) SetKeySize(v int32) {
	o.KeySize = v
}

// GetState returns the State field value
func (o *CertificateDto) GetState() CertificateState {
	if o == nil {
		var ret CertificateState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetStateOk() (*CertificateState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CertificateDto) SetState(v CertificateState) {
	o.State = v
}

// GetValidationStatus returns the ValidationStatus field value
func (o *CertificateDto) GetValidationStatus() CertificateValidationStatus {
	if o == nil {
		var ret CertificateValidationStatus
		return ret
	}

	return o.ValidationStatus
}

// GetValidationStatusOk returns a tuple with the ValidationStatus field value
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetValidationStatusOk() (*CertificateValidationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidationStatus, true
}

// SetValidationStatus sets field value
func (o *CertificateDto) SetValidationStatus(v CertificateValidationStatus) {
	o.ValidationStatus = v
}

// GetRaProfile returns the RaProfile field value if set, zero value otherwise.
func (o *CertificateDto) GetRaProfile() SimplifiedRaProfileDto {
	if o == nil || IsNil(o.RaProfile) {
		var ret SimplifiedRaProfileDto
		return ret
	}
	return *o.RaProfile
}

// GetRaProfileOk returns a tuple with the RaProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetRaProfileOk() (*SimplifiedRaProfileDto, bool) {
	if o == nil || IsNil(o.RaProfile) {
		return nil, false
	}
	return o.RaProfile, true
}

// HasRaProfile returns a boolean if a field has been set.
func (o *CertificateDto) HasRaProfile() bool {
	if o != nil && !IsNil(o.RaProfile) {
		return true
	}

	return false
}

// SetRaProfile gets a reference to the given SimplifiedRaProfileDto and assigns it to the RaProfile field.
func (o *CertificateDto) SetRaProfile(v SimplifiedRaProfileDto) {
	o.RaProfile = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *CertificateDto) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *CertificateDto) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *CertificateDto) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *CertificateDto) GetGroups() []GroupDto {
	if o == nil || IsNil(o.Groups) {
		var ret []GroupDto
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetGroupsOk() ([]GroupDto, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *CertificateDto) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []GroupDto and assigns it to the Groups field.
func (o *CertificateDto) SetGroups(v []GroupDto) {
	o.Groups = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CertificateDto) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CertificateDto) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *CertificateDto) SetOwner(v string) {
	o.Owner = &v
}

// GetOwnerUuid returns the OwnerUuid field value if set, zero value otherwise.
func (o *CertificateDto) GetOwnerUuid() string {
	if o == nil || IsNil(o.OwnerUuid) {
		var ret string
		return ret
	}
	return *o.OwnerUuid
}

// GetOwnerUuidOk returns a tuple with the OwnerUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetOwnerUuidOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerUuid) {
		return nil, false
	}
	return o.OwnerUuid, true
}

// HasOwnerUuid returns a boolean if a field has been set.
func (o *CertificateDto) HasOwnerUuid() bool {
	if o != nil && !IsNil(o.OwnerUuid) {
		return true
	}

	return false
}

// SetOwnerUuid gets a reference to the given string and assigns it to the OwnerUuid field.
func (o *CertificateDto) SetOwnerUuid(v string) {
	o.OwnerUuid = &v
}

// GetCertificateType returns the CertificateType field value if set, zero value otherwise.
func (o *CertificateDto) GetCertificateType() CertificateType {
	if o == nil || IsNil(o.CertificateType) {
		var ret CertificateType
		return ret
	}
	return *o.CertificateType
}

// GetCertificateTypeOk returns a tuple with the CertificateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetCertificateTypeOk() (*CertificateType, bool) {
	if o == nil || IsNil(o.CertificateType) {
		return nil, false
	}
	return o.CertificateType, true
}

// HasCertificateType returns a boolean if a field has been set.
func (o *CertificateDto) HasCertificateType() bool {
	if o != nil && !IsNil(o.CertificateType) {
		return true
	}

	return false
}

// SetCertificateType gets a reference to the given CertificateType and assigns it to the CertificateType field.
func (o *CertificateDto) SetCertificateType(v CertificateType) {
	o.CertificateType = &v
}

// GetIssuerSerialNumber returns the IssuerSerialNumber field value if set, zero value otherwise.
func (o *CertificateDto) GetIssuerSerialNumber() string {
	if o == nil || IsNil(o.IssuerSerialNumber) {
		var ret string
		return ret
	}
	return *o.IssuerSerialNumber
}

// GetIssuerSerialNumberOk returns a tuple with the IssuerSerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetIssuerSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerSerialNumber) {
		return nil, false
	}
	return o.IssuerSerialNumber, true
}

// HasIssuerSerialNumber returns a boolean if a field has been set.
func (o *CertificateDto) HasIssuerSerialNumber() bool {
	if o != nil && !IsNil(o.IssuerSerialNumber) {
		return true
	}

	return false
}

// SetIssuerSerialNumber gets a reference to the given string and assigns it to the IssuerSerialNumber field.
func (o *CertificateDto) SetIssuerSerialNumber(v string) {
	o.IssuerSerialNumber = &v
}

// GetComplianceStatus returns the ComplianceStatus field value if set, zero value otherwise.
func (o *CertificateDto) GetComplianceStatus() ComplianceStatus {
	if o == nil || IsNil(o.ComplianceStatus) {
		var ret ComplianceStatus
		return ret
	}
	return *o.ComplianceStatus
}

// GetComplianceStatusOk returns a tuple with the ComplianceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetComplianceStatusOk() (*ComplianceStatus, bool) {
	if o == nil || IsNil(o.ComplianceStatus) {
		return nil, false
	}
	return o.ComplianceStatus, true
}

// HasComplianceStatus returns a boolean if a field has been set.
func (o *CertificateDto) HasComplianceStatus() bool {
	if o != nil && !IsNil(o.ComplianceStatus) {
		return true
	}

	return false
}

// SetComplianceStatus gets a reference to the given ComplianceStatus and assigns it to the ComplianceStatus field.
func (o *CertificateDto) SetComplianceStatus(v ComplianceStatus) {
	o.ComplianceStatus = &v
}

// GetIssuerCertificateUuid returns the IssuerCertificateUuid field value if set, zero value otherwise.
func (o *CertificateDto) GetIssuerCertificateUuid() string {
	if o == nil || IsNil(o.IssuerCertificateUuid) {
		var ret string
		return ret
	}
	return *o.IssuerCertificateUuid
}

// GetIssuerCertificateUuidOk returns a tuple with the IssuerCertificateUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetIssuerCertificateUuidOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerCertificateUuid) {
		return nil, false
	}
	return o.IssuerCertificateUuid, true
}

// HasIssuerCertificateUuid returns a boolean if a field has been set.
func (o *CertificateDto) HasIssuerCertificateUuid() bool {
	if o != nil && !IsNil(o.IssuerCertificateUuid) {
		return true
	}

	return false
}

// SetIssuerCertificateUuid gets a reference to the given string and assigns it to the IssuerCertificateUuid field.
func (o *CertificateDto) SetIssuerCertificateUuid(v string) {
	o.IssuerCertificateUuid = &v
}

// GetPrivateKeyAvailability returns the PrivateKeyAvailability field value
func (o *CertificateDto) GetPrivateKeyAvailability() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PrivateKeyAvailability
}

// GetPrivateKeyAvailabilityOk returns a tuple with the PrivateKeyAvailability field value
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetPrivateKeyAvailabilityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKeyAvailability, true
}

// SetPrivateKeyAvailability sets field value
func (o *CertificateDto) SetPrivateKeyAvailability(v bool) {
	o.PrivateKeyAvailability = v
}

// GetTrustedCa returns the TrustedCa field value
func (o *CertificateDto) GetTrustedCa() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TrustedCa
}

// GetTrustedCaOk returns a tuple with the TrustedCa field value
// and a boolean to check if the value has been set.
func (o *CertificateDto) GetTrustedCaOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrustedCa, true
}

// SetTrustedCa sets field value
func (o *CertificateDto) SetTrustedCa(v bool) {
	o.TrustedCa = v
}

func (o CertificateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["commonName"] = o.CommonName
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.IssuerCommonName) {
		toSerialize["issuerCommonName"] = o.IssuerCommonName
	}
	if !IsNil(o.IssuerDn) {
		toSerialize["issuerDn"] = o.IssuerDn
	}
	toSerialize["subjectDn"] = o.SubjectDn
	if !IsNil(o.NotBefore) {
		toSerialize["notBefore"] = o.NotBefore
	}
	if !IsNil(o.NotAfter) {
		toSerialize["notAfter"] = o.NotAfter
	}
	toSerialize["publicKeyAlgorithm"] = o.PublicKeyAlgorithm
	toSerialize["signatureAlgorithm"] = o.SignatureAlgorithm
	toSerialize["keySize"] = o.KeySize
	toSerialize["state"] = o.State
	toSerialize["validationStatus"] = o.ValidationStatus
	if !IsNil(o.RaProfile) {
		toSerialize["raProfile"] = o.RaProfile
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.OwnerUuid) {
		toSerialize["ownerUuid"] = o.OwnerUuid
	}
	if !IsNil(o.CertificateType) {
		toSerialize["certificateType"] = o.CertificateType
	}
	if !IsNil(o.IssuerSerialNumber) {
		toSerialize["issuerSerialNumber"] = o.IssuerSerialNumber
	}
	if !IsNil(o.ComplianceStatus) {
		toSerialize["complianceStatus"] = o.ComplianceStatus
	}
	if !IsNil(o.IssuerCertificateUuid) {
		toSerialize["issuerCertificateUuid"] = o.IssuerCertificateUuid
	}
	toSerialize["privateKeyAvailability"] = o.PrivateKeyAvailability
	toSerialize["trustedCa"] = o.TrustedCa

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"commonName",
		"subjectDn",
		"publicKeyAlgorithm",
		"signatureAlgorithm",
		"keySize",
		"state",
		"validationStatus",
		"privateKeyAvailability",
		"trustedCa",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateDto := _CertificateDto{}

	err = json.Unmarshal(data, &varCertificateDto)

	if err != nil {
		return err
	}

	*o = CertificateDto(varCertificateDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "commonName")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "issuerCommonName")
		delete(additionalProperties, "issuerDn")
		delete(additionalProperties, "subjectDn")
		delete(additionalProperties, "notBefore")
		delete(additionalProperties, "notAfter")
		delete(additionalProperties, "publicKeyAlgorithm")
		delete(additionalProperties, "signatureAlgorithm")
		delete(additionalProperties, "keySize")
		delete(additionalProperties, "state")
		delete(additionalProperties, "validationStatus")
		delete(additionalProperties, "raProfile")
		delete(additionalProperties, "fingerprint")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "ownerUuid")
		delete(additionalProperties, "certificateType")
		delete(additionalProperties, "issuerSerialNumber")
		delete(additionalProperties, "complianceStatus")
		delete(additionalProperties, "issuerCertificateUuid")
		delete(additionalProperties, "privateKeyAvailability")
		delete(additionalProperties, "trustedCa")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateDto struct {
	value *CertificateDto
	isSet bool
}

func (v NullableCertificateDto) Get() *CertificateDto {
	return v.value
}

func (v *NullableCertificateDto) Set(val *CertificateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateDto(val *CertificateDto) *NullableCertificateDto {
	return &NullableCertificateDto{value: val, isSet: true}
}

func (v NullableCertificateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


