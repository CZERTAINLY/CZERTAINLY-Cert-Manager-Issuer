/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.1-SNAPSHOT
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the DateTimeAttributeConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateTimeAttributeConstraint{}

// DateTimeAttributeConstraint struct for DateTimeAttributeConstraint
type DateTimeAttributeConstraint struct {
	// Description of the constraint
	Description *string `json:"description,omitempty"`
	// Error message to be displayed for wrong data
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Type AttributeConstraintType `json:"type"`
	Data *DateTimeAttributeConstraintData `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DateTimeAttributeConstraint DateTimeAttributeConstraint

// NewDateTimeAttributeConstraint instantiates a new DateTimeAttributeConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateTimeAttributeConstraint(type_ AttributeConstraintType) *DateTimeAttributeConstraint {
	this := DateTimeAttributeConstraint{}
	this.Type = type_
	return &this
}

// NewDateTimeAttributeConstraintWithDefaults instantiates a new DateTimeAttributeConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateTimeAttributeConstraintWithDefaults() *DateTimeAttributeConstraint {
	this := DateTimeAttributeConstraint{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DateTimeAttributeConstraint) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeAttributeConstraint) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DateTimeAttributeConstraint) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DateTimeAttributeConstraint) SetDescription(v string) {
	o.Description = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *DateTimeAttributeConstraint) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeAttributeConstraint) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *DateTimeAttributeConstraint) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *DateTimeAttributeConstraint) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetType returns the Type field value
func (o *DateTimeAttributeConstraint) GetType() AttributeConstraintType {
	if o == nil {
		var ret AttributeConstraintType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DateTimeAttributeConstraint) GetTypeOk() (*AttributeConstraintType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DateTimeAttributeConstraint) SetType(v AttributeConstraintType) {
	o.Type = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DateTimeAttributeConstraint) GetData() DateTimeAttributeConstraintData {
	if o == nil || IsNil(o.Data) {
		var ret DateTimeAttributeConstraintData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeAttributeConstraint) GetDataOk() (*DateTimeAttributeConstraintData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DateTimeAttributeConstraint) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given DateTimeAttributeConstraintData and assigns it to the Data field.
func (o *DateTimeAttributeConstraint) SetData(v DateTimeAttributeConstraintData) {
	o.Data = &v
}

func (o DateTimeAttributeConstraint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateTimeAttributeConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DateTimeAttributeConstraint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDateTimeAttributeConstraint := _DateTimeAttributeConstraint{}

	err = json.Unmarshal(data, &varDateTimeAttributeConstraint)

	if err != nil {
		return err
	}

	*o = DateTimeAttributeConstraint(varDateTimeAttributeConstraint)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "errorMessage")
		delete(additionalProperties, "type")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDateTimeAttributeConstraint struct {
	value *DateTimeAttributeConstraint
	isSet bool
}

func (v NullableDateTimeAttributeConstraint) Get() *DateTimeAttributeConstraint {
	return v.value
}

func (v *NullableDateTimeAttributeConstraint) Set(val *DateTimeAttributeConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableDateTimeAttributeConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableDateTimeAttributeConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateTimeAttributeConstraint(val *DateTimeAttributeConstraint) *NullableDateTimeAttributeConstraint {
	return &NullableDateTimeAttributeConstraint{value: val, isSet: true}
}

func (v NullableDateTimeAttributeConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateTimeAttributeConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


