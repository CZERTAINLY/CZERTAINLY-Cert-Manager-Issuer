/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.1-SNAPSHOT
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the RequestAttributeDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestAttributeDto{}

// RequestAttributeDto Request attribute to send attribute content for object
type RequestAttributeDto struct {
	// UUID of the Attribute
	Uuid string `json:"uuid"`
	// Name of the Attribute
	Name string `json:"name"`
	ContentType AttributeContentType `json:"contentType"`
	// Content of the Attribute
	Content []BaseAttributeContentDto `json:"content"`
	AdditionalProperties map[string]interface{}
}

type _RequestAttributeDto RequestAttributeDto

// NewRequestAttributeDto instantiates a new RequestAttributeDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestAttributeDto(uuid string, name string, contentType AttributeContentType, content []BaseAttributeContentDto) *RequestAttributeDto {
	this := RequestAttributeDto{}
	this.Uuid = uuid
	this.Name = name
	this.ContentType = contentType
	this.Content = content
	return &this
}

// NewRequestAttributeDtoWithDefaults instantiates a new RequestAttributeDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestAttributeDtoWithDefaults() *RequestAttributeDto {
	this := RequestAttributeDto{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *RequestAttributeDto) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *RequestAttributeDto) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *RequestAttributeDto) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *RequestAttributeDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RequestAttributeDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RequestAttributeDto) SetName(v string) {
	o.Name = v
}

// GetContentType returns the ContentType field value
func (o *RequestAttributeDto) GetContentType() AttributeContentType {
	if o == nil {
		var ret AttributeContentType
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *RequestAttributeDto) GetContentTypeOk() (*AttributeContentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *RequestAttributeDto) SetContentType(v AttributeContentType) {
	o.ContentType = v
}

// GetContent returns the Content field value
func (o *RequestAttributeDto) GetContent() []BaseAttributeContentDto {
	if o == nil {
		var ret []BaseAttributeContentDto
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *RequestAttributeDto) GetContentOk() ([]BaseAttributeContentDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content, true
}

// SetContent sets field value
func (o *RequestAttributeDto) SetContent(v []BaseAttributeContentDto) {
	o.Content = v
}

func (o RequestAttributeDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestAttributeDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	toSerialize["contentType"] = o.ContentType
	toSerialize["content"] = o.Content

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RequestAttributeDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"name",
		"contentType",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestAttributeDto := _RequestAttributeDto{}

	err = json.Unmarshal(data, &varRequestAttributeDto)

	if err != nil {
		return err
	}

	*o = RequestAttributeDto(varRequestAttributeDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "contentType")
		delete(additionalProperties, "content")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequestAttributeDto struct {
	value *RequestAttributeDto
	isSet bool
}

func (v NullableRequestAttributeDto) Get() *RequestAttributeDto {
	return v.value
}

func (v *NullableRequestAttributeDto) Set(val *RequestAttributeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestAttributeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestAttributeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestAttributeDto(val *RequestAttributeDto) *NullableRequestAttributeDto {
	return &NullableRequestAttributeDto{value: val, isSet: true}
}

func (v NullableRequestAttributeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestAttributeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


