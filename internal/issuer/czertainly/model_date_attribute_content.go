/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.0
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the DateAttributeContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateAttributeContent{}

// DateAttributeContent struct for DateAttributeContent
type DateAttributeContent struct {
	// Content Reference
	Reference *string `json:"reference,omitempty"`
	// Date attribute value in format yyyy-MM-dd
	Data string `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _DateAttributeContent DateAttributeContent

// NewDateAttributeContent instantiates a new DateAttributeContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateAttributeContent(data string) *DateAttributeContent {
	this := DateAttributeContent{}
	this.Data = data
	return &this
}

// NewDateAttributeContentWithDefaults instantiates a new DateAttributeContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateAttributeContentWithDefaults() *DateAttributeContent {
	this := DateAttributeContent{}
	return &this
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *DateAttributeContent) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateAttributeContent) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *DateAttributeContent) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *DateAttributeContent) SetReference(v string) {
	o.Reference = &v
}

// GetData returns the Data field value
func (o *DateAttributeContent) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DateAttributeContent) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *DateAttributeContent) SetData(v string) {
	o.Data = v
}

func (o DateAttributeContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateAttributeContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	toSerialize["data"] = o.Data

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DateAttributeContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDateAttributeContent := _DateAttributeContent{}

	err = json.Unmarshal(data, &varDateAttributeContent)

	if err != nil {
		return err
	}

	*o = DateAttributeContent(varDateAttributeContent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reference")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDateAttributeContent struct {
	value *DateAttributeContent
	isSet bool
}

func (v NullableDateAttributeContent) Get() *DateAttributeContent {
	return v.value
}

func (v *NullableDateAttributeContent) Set(val *DateAttributeContent) {
	v.value = val
	v.isSet = true
}

func (v NullableDateAttributeContent) IsSet() bool {
	return v.isSet
}

func (v *NullableDateAttributeContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateAttributeContent(val *DateAttributeContent) *NullableDateAttributeContent {
	return &NullableDateAttributeContent{value: val, isSet: true}
}

func (v NullableDateAttributeContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateAttributeContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


