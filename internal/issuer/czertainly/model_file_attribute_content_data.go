/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.0
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the FileAttributeContentData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileAttributeContentData{}

// FileAttributeContentData File attribute content data
type FileAttributeContentData struct {
	// File content
	Content string `json:"content"`
	// Name of the file
	FileName string `json:"fileName"`
	// Type of the file uploaded
	MimeType string `json:"mimeType"`
	AdditionalProperties map[string]interface{}
}

type _FileAttributeContentData FileAttributeContentData

// NewFileAttributeContentData instantiates a new FileAttributeContentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileAttributeContentData(content string, fileName string, mimeType string) *FileAttributeContentData {
	this := FileAttributeContentData{}
	this.Content = content
	this.FileName = fileName
	this.MimeType = mimeType
	return &this
}

// NewFileAttributeContentDataWithDefaults instantiates a new FileAttributeContentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileAttributeContentDataWithDefaults() *FileAttributeContentData {
	this := FileAttributeContentData{}
	return &this
}

// GetContent returns the Content field value
func (o *FileAttributeContentData) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *FileAttributeContentData) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *FileAttributeContentData) SetContent(v string) {
	o.Content = v
}

// GetFileName returns the FileName field value
func (o *FileAttributeContentData) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *FileAttributeContentData) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *FileAttributeContentData) SetFileName(v string) {
	o.FileName = v
}

// GetMimeType returns the MimeType field value
func (o *FileAttributeContentData) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *FileAttributeContentData) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *FileAttributeContentData) SetMimeType(v string) {
	o.MimeType = v
}

func (o FileAttributeContentData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileAttributeContentData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["fileName"] = o.FileName
	toSerialize["mimeType"] = o.MimeType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FileAttributeContentData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"fileName",
		"mimeType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileAttributeContentData := _FileAttributeContentData{}

	err = json.Unmarshal(data, &varFileAttributeContentData)

	if err != nil {
		return err
	}

	*o = FileAttributeContentData(varFileAttributeContentData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "fileName")
		delete(additionalProperties, "mimeType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFileAttributeContentData struct {
	value *FileAttributeContentData
	isSet bool
}

func (v NullableFileAttributeContentData) Get() *FileAttributeContentData {
	return v.value
}

func (v *NullableFileAttributeContentData) Set(val *FileAttributeContentData) {
	v.value = val
	v.isSet = true
}

func (v NullableFileAttributeContentData) IsSet() bool {
	return v.isSet
}

func (v *NullableFileAttributeContentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileAttributeContentData(val *FileAttributeContentData) *NullableFileAttributeContentData {
	return &NullableFileAttributeContentData{value: val, isSet: true}
}

func (v NullableFileAttributeContentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileAttributeContentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


