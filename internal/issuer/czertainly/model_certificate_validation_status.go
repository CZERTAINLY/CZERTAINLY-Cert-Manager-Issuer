/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.0
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// CertificateValidationStatus Current validation status of the certificate
type CertificateValidationStatus string

// List of CertificateValidationStatus
const (
	CERTIFICATEVALIDATIONSTATUS_NOT_CHECKED CertificateValidationStatus = "not_checked"
	CERTIFICATEVALIDATIONSTATUS_FAILED CertificateValidationStatus = "failed"
	CERTIFICATEVALIDATIONSTATUS_INACTIVE CertificateValidationStatus = "inactive"
	CERTIFICATEVALIDATIONSTATUS_INVALID CertificateValidationStatus = "invalid"
	CERTIFICATEVALIDATIONSTATUS_VALID CertificateValidationStatus = "valid"
	CERTIFICATEVALIDATIONSTATUS_REVOKED CertificateValidationStatus = "revoked"
	CERTIFICATEVALIDATIONSTATUS_EXPIRING CertificateValidationStatus = "expiring"
	CERTIFICATEVALIDATIONSTATUS_EXPIRED CertificateValidationStatus = "expired"
)

// All allowed values of CertificateValidationStatus enum
var AllowedCertificateValidationStatusEnumValues = []CertificateValidationStatus{
	"not_checked",
	"failed",
	"inactive",
	"invalid",
	"valid",
	"revoked",
	"expiring",
	"expired",
}

func (v *CertificateValidationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CertificateValidationStatus(value)
	for _, existing := range AllowedCertificateValidationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CertificateValidationStatus", value)
}

// NewCertificateValidationStatusFromValue returns a pointer to a valid CertificateValidationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCertificateValidationStatusFromValue(v string) (*CertificateValidationStatus, error) {
	ev := CertificateValidationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CertificateValidationStatus: valid values are %v", v, AllowedCertificateValidationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CertificateValidationStatus) IsValid() bool {
	for _, existing := range AllowedCertificateValidationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CertificateValidationStatus value
func (v CertificateValidationStatus) Ptr() *CertificateValidationStatus {
	return &v
}

type NullableCertificateValidationStatus struct {
	value *CertificateValidationStatus
	isSet bool
}

func (v NullableCertificateValidationStatus) Get() *CertificateValidationStatus {
	return v.value
}

func (v *NullableCertificateValidationStatus) Set(val *CertificateValidationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateValidationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateValidationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateValidationStatus(val *CertificateValidationStatus) *NullableCertificateValidationStatus {
	return &NullableCertificateValidationStatus{value: val, isSet: true}
}

func (v NullableCertificateValidationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateValidationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

