/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.0
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// AttributeContentType Type of the attribute content. 
type AttributeContentType string

// List of AttributeContentType
const (
	ATTRIBUTECONTENTTYPE_STRING AttributeContentType = "string"
	ATTRIBUTECONTENTTYPE_TEXT AttributeContentType = "text"
	ATTRIBUTECONTENTTYPE_INTEGER AttributeContentType = "integer"
	ATTRIBUTECONTENTTYPE_BOOLEAN AttributeContentType = "boolean"
	ATTRIBUTECONTENTTYPE_FLOAT AttributeContentType = "float"
	ATTRIBUTECONTENTTYPE_DATE AttributeContentType = "date"
	ATTRIBUTECONTENTTYPE_TIME AttributeContentType = "time"
	ATTRIBUTECONTENTTYPE_DATETIME AttributeContentType = "datetime"
	ATTRIBUTECONTENTTYPE_SECRET AttributeContentType = "secret"
	ATTRIBUTECONTENTTYPE_FILE AttributeContentType = "file"
	ATTRIBUTECONTENTTYPE_CREDENTIAL AttributeContentType = "credential"
	ATTRIBUTECONTENTTYPE_CODEBLOCK AttributeContentType = "codeblock"
	ATTRIBUTECONTENTTYPE_OBJECT AttributeContentType = "object"
)

// All allowed values of AttributeContentType enum
var AllowedAttributeContentTypeEnumValues = []AttributeContentType{
	"string",
	"text",
	"integer",
	"boolean",
	"float",
	"date",
	"time",
	"datetime",
	"secret",
	"file",
	"credential",
	"codeblock",
	"object",
}

func (v *AttributeContentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AttributeContentType(value)
	for _, existing := range AllowedAttributeContentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AttributeContentType", value)
}

// NewAttributeContentTypeFromValue returns a pointer to a valid AttributeContentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAttributeContentTypeFromValue(v string) (*AttributeContentType, error) {
	ev := AttributeContentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AttributeContentType: valid values are %v", v, AllowedAttributeContentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AttributeContentType) IsValid() bool {
	for _, existing := range AllowedAttributeContentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AttributeContentType value
func (v AttributeContentType) Ptr() *AttributeContentType {
	return &v
}

type NullableAttributeContentType struct {
	value *AttributeContentType
	isSet bool
}

func (v NullableAttributeContentType) Get() *AttributeContentType {
	return v.value
}

func (v *NullableAttributeContentType) Set(val *AttributeContentType) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeContentType) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeContentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeContentType(val *AttributeContentType) *NullableAttributeContentType {
	return &NullableAttributeContentType{value: val, isSet: true}
}

func (v NullableAttributeContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeContentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

