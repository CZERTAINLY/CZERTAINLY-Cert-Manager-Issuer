/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.0
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the GroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupDto{}

// GroupDto Groups associated to the Key
type GroupDto struct {
	// Object identifier
	Uuid string `json:"uuid"`
	// Object Name
	Name string `json:"name"`
	// Description of the Group
	Description *string `json:"description,omitempty"`
	// Group contact email
	Email *string `json:"email,omitempty"`
	// List of Custom Attributes
	CustomAttributes []ResponseAttributeDto `json:"customAttributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GroupDto GroupDto

// NewGroupDto instantiates a new GroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupDto(uuid string, name string) *GroupDto {
	this := GroupDto{}
	this.Uuid = uuid
	this.Name = name
	return &this
}

// NewGroupDtoWithDefaults instantiates a new GroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupDtoWithDefaults() *GroupDto {
	this := GroupDto{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *GroupDto) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *GroupDto) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *GroupDto) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *GroupDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GroupDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GroupDto) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GroupDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GroupDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GroupDto) SetDescription(v string) {
	o.Description = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *GroupDto) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupDto) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *GroupDto) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *GroupDto) SetEmail(v string) {
	o.Email = &v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise.
func (o *GroupDto) GetCustomAttributes() []ResponseAttributeDto {
	if o == nil || IsNil(o.CustomAttributes) {
		var ret []ResponseAttributeDto
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupDto) GetCustomAttributesOk() ([]ResponseAttributeDto, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *GroupDto) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []ResponseAttributeDto and assigns it to the CustomAttributes field.
func (o *GroupDto) SetCustomAttributes(v []ResponseAttributeDto) {
	o.CustomAttributes = v
}

func (o GroupDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.CustomAttributes) {
		toSerialize["customAttributes"] = o.CustomAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GroupDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupDto := _GroupDto{}

	err = json.Unmarshal(data, &varGroupDto)

	if err != nil {
		return err
	}

	*o = GroupDto(varGroupDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "email")
		delete(additionalProperties, "customAttributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGroupDto struct {
	value *GroupDto
	isSet bool
}

func (v NullableGroupDto) Get() *GroupDto {
	return v.value
}

func (v *NullableGroupDto) Set(val *GroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupDto(val *GroupDto) *NullableGroupDto {
	return &NullableGroupDto{value: val, isSet: true}
}

func (v NullableGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


