/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.0
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// Resource Source Object Type
type Resource string

// List of Resource
const (
	RESOURCE_NONE Resource = "NONE"
	RESOURCE_DASHBOARD Resource = "dashboard"
	RESOURCE_SETTINGS Resource = "settings"
	RESOURCE_AUDIT_LOGS Resource = "auditLogs"
	RESOURCE_CREDENTIALS Resource = "credentials"
	RESOURCE_CONNECTORS Resource = "connectors"
	RESOURCE_ATTRIBUTES Resource = "attributes"
	RESOURCE_JOBS Resource = "jobs"
	RESOURCE_NOTIFICATION_INSTANCES Resource = "notificationInstances"
	RESOURCE_USERS Resource = "users"
	RESOURCE_ROLES Resource = "roles"
	RESOURCE_ACME_ACCOUNTS Resource = "acmeAccounts"
	RESOURCE_ACME_PROFILES Resource = "acmeProfiles"
	RESOURCE_SCEP_PROFILES Resource = "scepProfiles"
	RESOURCE_CMP_PROFILES Resource = "cmpProfiles"
	RESOURCE_AUTHORITIES Resource = "authorities"
	RESOURCE_RA_PROFILES Resource = "raProfiles"
	RESOURCE_CERTIFICATES Resource = "certificates"
	RESOURCE_CERTIFICATE_REQUESTS Resource = "certificateRequests"
	RESOURCE_GROUPS Resource = "groups"
	RESOURCE_COMPLIANCE_PROFILES Resource = "complianceProfiles"
	RESOURCE_DISCOVERIES Resource = "discoveries"
	RESOURCE_ENTITIES Resource = "entities"
	RESOURCE_LOCATIONS Resource = "locations"
	RESOURCE_TOKEN_PROFILES Resource = "tokenProfiles"
	RESOURCE_TOKENS Resource = "tokens"
	RESOURCE_KEYS Resource = "keys"
	RESOURCE_APPROVAL_PROFILES Resource = "approvalProfiles"
	RESOURCE_APPROVALS Resource = "approvals"
	RESOURCE_RULES Resource = "rules"
	RESOURCE_ACTIONS Resource = "actions"
	RESOURCE_TRIGGERS Resource = "triggers"
)

// All allowed values of Resource enum
var AllowedResourceEnumValues = []Resource{
	"NONE",
	"dashboard",
	"settings",
	"auditLogs",
	"credentials",
	"connectors",
	"attributes",
	"jobs",
	"notificationInstances",
	"users",
	"roles",
	"acmeAccounts",
	"acmeProfiles",
	"scepProfiles",
	"cmpProfiles",
	"authorities",
	"raProfiles",
	"certificates",
	"certificateRequests",
	"groups",
	"complianceProfiles",
	"discoveries",
	"entities",
	"locations",
	"tokenProfiles",
	"tokens",
	"keys",
	"approvalProfiles",
	"approvals",
	"rules",
	"actions",
	"triggers",
}

func (v *Resource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Resource(value)
	for _, existing := range AllowedResourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Resource", value)
}

// NewResourceFromValue returns a pointer to a valid Resource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceFromValue(v string) (*Resource, error) {
	ev := Resource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Resource: valid values are %v", v, AllowedResourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Resource) IsValid() bool {
	for _, existing := range AllowedResourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Resource value
func (v Resource) Ptr() *Resource {
	return &v
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

