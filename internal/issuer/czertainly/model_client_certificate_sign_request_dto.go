/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.11.1-SNAPSHOT
Contact: getinfo@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the ClientCertificateSignRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientCertificateSignRequestDto{}

// ClientCertificateSignRequestDto struct for ClientCertificateSignRequestDto
type ClientCertificateSignRequestDto struct {
	// Certificate sign request (PKCS#10) encoded as Base64 string
	Pkcs10 string `json:"pkcs10"`

	// List of RA Profile related Attributes to issue Certificate
	Attributes []RequestAttributeDto `json:"attributes"`
	AdditionalProperties map[string]interface{}
}

type _ClientCertificateSignRequestDto ClientCertificateSignRequestDto

// NewClientCertificateSignRequestDto instantiates a new ClientCertificateSignRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientCertificateSignRequestDto(pkcs10 string, attributes []RequestAttributeDto) *ClientCertificateSignRequestDto {
	this := ClientCertificateSignRequestDto{}
	this.Pkcs10 = pkcs10
	this.Attributes = attributes
	return &this
}

// NewClientCertificateSignRequestDtoWithDefaults instantiates a new ClientCertificateSignRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientCertificateSignRequestDtoWithDefaults() *ClientCertificateSignRequestDto {
	this := ClientCertificateSignRequestDto{}
	return &this
}

// GetPkcs10 returns the Pkcs10 field value
func (o *ClientCertificateSignRequestDto) GetPkcs10() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pkcs10
}

// GetPkcs10Ok returns a tuple with the Pkcs10 field value
// and a boolean to check if the value has been set.
func (o *ClientCertificateSignRequestDto) GetPkcs10Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pkcs10, true
}

// SetPkcs10 sets field value
func (o *ClientCertificateSignRequestDto) SetPkcs10(v string) {
	o.Pkcs10 = v
}

// GetAttributes returns the Attributes field value
func (o *ClientCertificateSignRequestDto) GetAttributes() []RequestAttributeDto {
	if o == nil {
		var ret []RequestAttributeDto
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *ClientCertificateSignRequestDto) GetAttributesOk() ([]RequestAttributeDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attributes, true
}

// SetAttributes sets field value
func (o *ClientCertificateSignRequestDto) SetAttributes(v []RequestAttributeDto) {
	o.Attributes = v
}

func (o ClientCertificateSignRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientCertificateSignRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkcs10"] = o.Pkcs10
	toSerialize["attributes"] = o.Attributes

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClientCertificateSignRequestDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkcs10",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClientCertificateSignRequestDto := _ClientCertificateSignRequestDto{}

	err = json.Unmarshal(data, &varClientCertificateSignRequestDto)

	if err != nil {
		return err
	}

	*o = ClientCertificateSignRequestDto(varClientCertificateSignRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pkcs10")
		delete(additionalProperties, "attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClientCertificateSignRequestDto struct {
	value *ClientCertificateSignRequestDto
	isSet bool
}

func (v NullableClientCertificateSignRequestDto) Get() *ClientCertificateSignRequestDto {
	return v.value
}

func (v *NullableClientCertificateSignRequestDto) Set(val *ClientCertificateSignRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableClientCertificateSignRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableClientCertificateSignRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientCertificateSignRequestDto(val *ClientCertificateSignRequestDto) *NullableClientCertificateSignRequestDto {
	return &NullableClientCertificateSignRequestDto{value: val, isSet: true}
}

func (v NullableClientCertificateSignRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientCertificateSignRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


