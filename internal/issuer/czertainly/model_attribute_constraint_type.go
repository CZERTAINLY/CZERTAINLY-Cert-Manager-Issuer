/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.0
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// AttributeConstraintType Attribute Constraint Type
type AttributeConstraintType string

// List of AttributeConstraintType
const (
	ATTRIBUTECONSTRAINTTYPE_REG_EXP AttributeConstraintType = "regExp"
	ATTRIBUTECONSTRAINTTYPE_RANGE AttributeConstraintType = "range"
	ATTRIBUTECONSTRAINTTYPE_DATE_TIME AttributeConstraintType = "dateTime"
)

// All allowed values of AttributeConstraintType enum
var AllowedAttributeConstraintTypeEnumValues = []AttributeConstraintType{
	"regExp",
	"range",
	"dateTime",
}

func (v *AttributeConstraintType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AttributeConstraintType(value)
	for _, existing := range AllowedAttributeConstraintTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AttributeConstraintType", value)
}

// NewAttributeConstraintTypeFromValue returns a pointer to a valid AttributeConstraintType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAttributeConstraintTypeFromValue(v string) (*AttributeConstraintType, error) {
	ev := AttributeConstraintType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AttributeConstraintType: valid values are %v", v, AllowedAttributeConstraintTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AttributeConstraintType) IsValid() bool {
	for _, existing := range AllowedAttributeConstraintTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AttributeConstraintType value
func (v AttributeConstraintType) Ptr() *AttributeConstraintType {
	return &v
}

type NullableAttributeConstraintType struct {
	value *AttributeConstraintType
	isSet bool
}

func (v NullableAttributeConstraintType) Get() *AttributeConstraintType {
	return v.value
}

func (v *NullableAttributeConstraintType) Set(val *AttributeConstraintType) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeConstraintType) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeConstraintType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeConstraintType(val *AttributeConstraintType) *NullableAttributeConstraintType {
	return &NullableAttributeConstraintType{value: val, isSet: true}
}

func (v NullableAttributeConstraintType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeConstraintType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

