/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.0
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"fmt"
)

// checks if the CertificateProtocolDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateProtocolDto{}

// CertificateProtocolDto Information about protocol used to issue the certificate
type CertificateProtocolDto struct {
	Protocol CertificateProtocol `json:"protocol"`
	// UUID of the protocol
	ProtocolProfileUuid string `json:"protocolProfileUuid"`
	// Additional UUID for use of the protocol, for example ACME Account UUID in case of ACME protocol
	AdditionalProtocolUuid *string `json:"additionalProtocolUuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateProtocolDto CertificateProtocolDto

// NewCertificateProtocolDto instantiates a new CertificateProtocolDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateProtocolDto(protocol CertificateProtocol, protocolProfileUuid string) *CertificateProtocolDto {
	this := CertificateProtocolDto{}
	this.Protocol = protocol
	this.ProtocolProfileUuid = protocolProfileUuid
	return &this
}

// NewCertificateProtocolDtoWithDefaults instantiates a new CertificateProtocolDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateProtocolDtoWithDefaults() *CertificateProtocolDto {
	this := CertificateProtocolDto{}
	return &this
}

// GetProtocol returns the Protocol field value
func (o *CertificateProtocolDto) GetProtocol() CertificateProtocol {
	if o == nil {
		var ret CertificateProtocol
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *CertificateProtocolDto) GetProtocolOk() (*CertificateProtocol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *CertificateProtocolDto) SetProtocol(v CertificateProtocol) {
	o.Protocol = v
}

// GetProtocolProfileUuid returns the ProtocolProfileUuid field value
func (o *CertificateProtocolDto) GetProtocolProfileUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProtocolProfileUuid
}

// GetProtocolProfileUuidOk returns a tuple with the ProtocolProfileUuid field value
// and a boolean to check if the value has been set.
func (o *CertificateProtocolDto) GetProtocolProfileUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtocolProfileUuid, true
}

// SetProtocolProfileUuid sets field value
func (o *CertificateProtocolDto) SetProtocolProfileUuid(v string) {
	o.ProtocolProfileUuid = v
}

// GetAdditionalProtocolUuid returns the AdditionalProtocolUuid field value if set, zero value otherwise.
func (o *CertificateProtocolDto) GetAdditionalProtocolUuid() string {
	if o == nil || IsNil(o.AdditionalProtocolUuid) {
		var ret string
		return ret
	}
	return *o.AdditionalProtocolUuid
}

// GetAdditionalProtocolUuidOk returns a tuple with the AdditionalProtocolUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProtocolDto) GetAdditionalProtocolUuidOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalProtocolUuid) {
		return nil, false
	}
	return o.AdditionalProtocolUuid, true
}

// HasAdditionalProtocolUuid returns a boolean if a field has been set.
func (o *CertificateProtocolDto) HasAdditionalProtocolUuid() bool {
	if o != nil && !IsNil(o.AdditionalProtocolUuid) {
		return true
	}

	return false
}

// SetAdditionalProtocolUuid gets a reference to the given string and assigns it to the AdditionalProtocolUuid field.
func (o *CertificateProtocolDto) SetAdditionalProtocolUuid(v string) {
	o.AdditionalProtocolUuid = &v
}

func (o CertificateProtocolDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateProtocolDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["protocol"] = o.Protocol
	toSerialize["protocolProfileUuid"] = o.ProtocolProfileUuid
	if !IsNil(o.AdditionalProtocolUuid) {
		toSerialize["additionalProtocolUuid"] = o.AdditionalProtocolUuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateProtocolDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"protocol",
		"protocolProfileUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateProtocolDto := _CertificateProtocolDto{}

	err = json.Unmarshal(data, &varCertificateProtocolDto)

	if err != nil {
		return err
	}

	*o = CertificateProtocolDto(varCertificateProtocolDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "protocolProfileUuid")
		delete(additionalProperties, "additionalProtocolUuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateProtocolDto struct {
	value *CertificateProtocolDto
	isSet bool
}

func (v NullableCertificateProtocolDto) Get() *CertificateProtocolDto {
	return v.value
}

func (v *NullableCertificateProtocolDto) Set(val *CertificateProtocolDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateProtocolDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateProtocolDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateProtocolDto(val *CertificateProtocolDto) *NullableCertificateProtocolDto {
	return &NullableCertificateProtocolDto{value: val, isSet: true}
}

func (v NullableCertificateProtocolDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateProtocolDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


