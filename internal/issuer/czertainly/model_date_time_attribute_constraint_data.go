/*
CZERTAINLY Cert Manager

REST API for implementations of cert-manager issuer

API version: 2.13.0
Contact: info@czertainly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package czertainly

import (
	"encoding/json"
	"time"
)

// checks if the DateTimeAttributeConstraintData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateTimeAttributeConstraintData{}

// DateTimeAttributeConstraintData DateTime Range Attribute Constraint Data
type DateTimeAttributeConstraintData struct {
	// Start of the datetime for validation
	From *time.Time `json:"from,omitempty"`
	// End of the datetime for validation
	To *time.Time `json:"to,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DateTimeAttributeConstraintData DateTimeAttributeConstraintData

// NewDateTimeAttributeConstraintData instantiates a new DateTimeAttributeConstraintData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateTimeAttributeConstraintData() *DateTimeAttributeConstraintData {
	this := DateTimeAttributeConstraintData{}
	return &this
}

// NewDateTimeAttributeConstraintDataWithDefaults instantiates a new DateTimeAttributeConstraintData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateTimeAttributeConstraintDataWithDefaults() *DateTimeAttributeConstraintData {
	this := DateTimeAttributeConstraintData{}
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *DateTimeAttributeConstraintData) GetFrom() time.Time {
	if o == nil || IsNil(o.From) {
		var ret time.Time
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeAttributeConstraintData) GetFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *DateTimeAttributeConstraintData) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given time.Time and assigns it to the From field.
func (o *DateTimeAttributeConstraintData) SetFrom(v time.Time) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *DateTimeAttributeConstraintData) GetTo() time.Time {
	if o == nil || IsNil(o.To) {
		var ret time.Time
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeAttributeConstraintData) GetToOk() (*time.Time, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *DateTimeAttributeConstraintData) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given time.Time and assigns it to the To field.
func (o *DateTimeAttributeConstraintData) SetTo(v time.Time) {
	o.To = &v
}

func (o DateTimeAttributeConstraintData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateTimeAttributeConstraintData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DateTimeAttributeConstraintData) UnmarshalJSON(data []byte) (err error) {
	varDateTimeAttributeConstraintData := _DateTimeAttributeConstraintData{}

	err = json.Unmarshal(data, &varDateTimeAttributeConstraintData)

	if err != nil {
		return err
	}

	*o = DateTimeAttributeConstraintData(varDateTimeAttributeConstraintData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "from")
		delete(additionalProperties, "to")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDateTimeAttributeConstraintData struct {
	value *DateTimeAttributeConstraintData
	isSet bool
}

func (v NullableDateTimeAttributeConstraintData) Get() *DateTimeAttributeConstraintData {
	return v.value
}

func (v *NullableDateTimeAttributeConstraintData) Set(val *DateTimeAttributeConstraintData) {
	v.value = val
	v.isSet = true
}

func (v NullableDateTimeAttributeConstraintData) IsSet() bool {
	return v.isSet
}

func (v *NullableDateTimeAttributeConstraintData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateTimeAttributeConstraintData(val *DateTimeAttributeConstraintData) *NullableDateTimeAttributeConstraintData {
	return &NullableDateTimeAttributeConstraintData{value: val, isSet: true}
}

func (v NullableDateTimeAttributeConstraintData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateTimeAttributeConstraintData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


